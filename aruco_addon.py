#!/usr/bin/env python3
"""
ArUco Markers + Cameras Importer - Blender Addon
================================================

Addon –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ –∏ –∫–∞–º–µ—Ä –≤ Blender –∏–∑ —Ñ–∞–π–ª–æ–≤ –∞–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏.

–£—Å—Ç–∞–Ω–æ–≤–∫–∞:
1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ aruco_importer.py
2. Blender ‚Üí Edit ‚Üí Preferences ‚Üí Add-ons ‚Üí Install
3. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ addon
4. –ü–∞–Ω–µ–ª—å –ø–æ—è–≤–∏—Ç—Å—è –≤ 3D Viewport ‚Üí N ‚Üí ArUco

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ main.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è blender_aruco_markers.json
2. –í Blender –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å ArUco (N ‚Üí ArUco)
3. –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–∞–∂–º–∏—Ç–µ "Import Scene"
"""

bl_info = {
    "name": "ArUco Markers + Cameras Importer",
    "author": "ArUco Autocalibration Project", 
    "version": (2, 0, 0),
    "blender": (3, 0, 0),
    "location": "3D Viewport ‚Üí Sidebar ‚Üí ArUco",
    "description": "Import 3D ArUco markers and cameras from autocalibration pipeline",
    "category": "Import-Export",
    "doc_url": "https://github.com/your-project/aruco-autocalibration",
}

import bpy
import json
import os
import bmesh
from mathutils import Matrix, Vector
from bpy.props import (
    StringProperty, 
    BoolProperty, 
    FloatProperty, 
    EnumProperty,
    IntProperty
)
from bpy.types import Panel, Operator, PropertyGroup
from bpy_extras.io_utils import ImportHelper


class ArUcoImporterProperties(PropertyGroup):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ –∏ –∫–∞–º–µ—Ä"""
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
    filepath: StringProperty(
        name="–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö",
        description="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É blender_aruco_markers.json",
        default="",
        subtype='FILE_PATH'
    )
    
    # –ß—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
    import_cameras: BoolProperty(
        name="–ò–º–ø–æ—Ä—Ç –∫–∞–º–µ—Ä",
        description="–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—ã –∏–∑ RealityCapture",
        default=True
    )
    
    import_markers: BoolProperty(
        name="–ò–º–ø–æ—Ä—Ç –º–∞—Ä–∫–µ—Ä–æ–≤", 
        description="–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ArUco –º–∞—Ä–∫–µ—Ä—ã",
        default=True
    )
    
    # === –ù–ê–°–¢–†–û–ô–ö–ò –ö–ê–ú–ï–† ===
    camera_size: FloatProperty(
        name="–†–∞–∑–º–µ—Ä –∫–∞–º–µ—Ä",
        description="–†–∞–∑–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞–º–µ—Ä",
        default=0.2,
        min=0.01,
        max=2.0
    )
    
    show_frustum: BoolProperty(
        name="–ü–æ–∫–∞–∑–∞—Ç—å frustum",
        description="–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–∏—Ä–∞–º–∏–¥—É –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞–º–µ—Ä—ã",
        default=True
    )
    
    frustum_scale: FloatProperty(
        name="–ú–∞—Å—à—Ç–∞–± frustum",
        description="–†–∞–∑–º–µ—Ä –ø–∏—Ä–∞–º–∏–¥—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏",
        default=1.0,
        min=0.1,
        max=5.0
    )
    
    camera_color_by_quality: BoolProperty(
        name="–¶–≤–µ—Ç –∫–∞–º–µ—Ä –ø–æ –∫–∞—á–µ—Å—Ç–≤—É",
        description="–†–∞—Å–∫—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–º–µ—Ä—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏",
        default=True
    )
    
    # === –ù–ê–°–¢–†–û–ô–ö–ò –ú–ê–†–ö–ï–†–û–í ===
    marker_size: FloatProperty(
        name="–†–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–æ–≤",
        description="–†–∞–∑–º–µ—Ä Empty –æ–±—ä–µ–∫—Ç–æ–≤ –º–∞—Ä–∫–µ—Ä–æ–≤",
        default=0.1,
        min=0.01,
        max=1.0
    )
    
    size_by_quality: BoolProperty(
        name="–†–∞–∑–º–µ—Ä –ø–æ –∫–∞—á–µ—Å—Ç–≤—É",
        description="–ò–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏",
        default=True
    )
    
    color_by_quality: BoolProperty(
        name="–¶–≤–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É", 
        description="–†–∞—Å–∫—Ä–∞—à–∏–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏",
        default=True
    )
    
    # –§–∏–ª—å—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
    import_low_quality: BoolProperty(
        name="–ò–º–ø–æ—Ä—Ç –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞",
        description="–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã —Å –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏",
        default=True
    )
    
    min_confidence: FloatProperty(
        name="–ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
        description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏ (0-1)",
        default=0.0,
        min=0.0,
        max=1.0
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
    empty_type: EnumProperty(
        name="–¢–∏–ø Empty –º–∞—Ä–∫–µ—Ä–æ–≤",
        description="–¢–∏–ø Empty –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤",
        items=[
            ('PLAIN_AXES', '–û—Å–∏', '–ü—Ä–æ—Å—Ç—ã–µ –æ—Å–∏'),
            ('ARROWS', '–°—Ç—Ä–µ–ª–∫–∏', '–°—Ç—Ä–µ–ª–∫–∏'),
            ('SINGLE_ARROW', '–û–¥–Ω–∞ —Å—Ç—Ä–µ–ª–∫–∞', '–û–¥–Ω–∞ —Å—Ç—Ä–µ–ª–∫–∞'),
            ('CIRCLE', '–ö—Ä—É–≥', '–ö—Ä—É–≥'),
            ('CUBE', '–ö—É–±', '–ö—É–±'),
            ('SPHERE', '–°—Ñ–µ—Ä–∞', '–°—Ñ–µ—Ä–∞'),
            ('CONE', '–ö–æ–Ω—É—Å', '–ö–æ–Ω—É—Å'),
        ],
        default='PLAIN_AXES'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    cameras_collection_name: StringProperty(
        name="–ö–æ–ª–ª–µ–∫—Ü–∏—è –∫–∞–º–µ—Ä",
        description="–ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∫–∞–º–µ—Ä",
        default="RC_Cameras"
    )
    
    markers_collection_name: StringProperty(
        name="–ö–æ–ª–ª–µ–∫—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤",
        description="–ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤",
        default="ArUco_Markers"
    )
    
    clear_existing: BoolProperty(
        name="–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ",
        description="–£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º",
        default=True
    )


# === –§–£–ù–ö–¶–ò–ò –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –°–ö–†–ò–ü–¢–ê ===

def to_blender_cam_matrix(R_w2cv_3x3, C_world_vec3):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –∫–∞–º–µ—Ä—ã –∏–∑ OpenCV –≤ Blender —Ñ–æ—Ä–º–∞—Ç"""
    # OpenCV: +X right, +Y down, +Z forward
    # Blender cam: +X right, +Y up, +Z backward (looks along -Z)
    R_bcam2cv = Matrix(((1,0,0),(0,-1,0),(0,0,-1)))
    R_cv2bcam = R_bcam2cv.transposed()

    # world -> blender_cam
    R_w2bcam = R_cv2bcam @ R_w2cv_3x3

    # Blender needs object matrix (local->world): invert rotation to get blender_cam->world
    R_bcam2w = R_w2bcam.transposed()  # rotation, so inverse == transpose

    # Build 4x4 safely
    M = R_bcam2w.to_4x4()
    M.translation = Vector(C_world_vec3)
    return M


def ensure_collection(name):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    coll = bpy.data.collections.get(name)
    if not coll:
        coll = bpy.data.collections.new(name)
        bpy.context.scene.collection.children.link(coll)
    return coll


class ARUCO_OT_import_scene(Operator, ImportHelper):
    """–ò–º–ø–æ—Ä—Ç –∫–∞–º–µ—Ä –∏ ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    
    bl_idname = "aruco.import_scene"
    bl_label = "Import Scene"
    bl_description = "–ò–º–ø–æ—Ä—Ç –∫–∞–º–µ—Ä –∏ 3D –ø–æ–∑–∏—Ü–∏–π ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ Blender"
    bl_options = {'REGISTER', 'UNDO'}
    
    # –§–∏–ª—å—Ç—Ä —Ñ–∞–π–ª–æ–≤
    filename_ext = ".json"
    filter_glob: StringProperty(
        default="*.json",
        options={'HIDDEN'},
        maxlen=255,
    )
    
    def execute(self, context):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞"""
        
        props = context.scene.aruco_importer
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å—Ü–µ–Ω—ã ArUco")
        print(f"   –ò–º–ø–æ—Ä—Ç –∫–∞–º–µ—Ä: {props.import_cameras}")
        print(f"   –ò–º–ø–æ—Ä—Ç –º–∞—Ä–∫–µ—Ä–æ–≤: {props.import_markers}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        data_file = self.filepath if hasattr(self, 'filepath') and self.filepath else props.filepath
        print(f"   –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {data_file}")
        
        if not data_file:
            # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞
            data_file = self.find_data_file()
            print(f"   –ê–≤—Ç–æ–ø–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {data_file}")
        
        if not data_file or not os.path.exists(data_file):
            self.report({'ERROR'}, f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_file}")
            return {'CANCELLED'}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        props.filepath = data_file
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            print(f"üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞...")
            with open(data_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            print(f"   –ö–ª—é—á–∏ –≤ –¥–∞–Ω–Ω—ã—Ö: {list(data.keys())}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
            bpy.context.scene.unit_settings.system = 'METRIC'
            bpy.context.scene.unit_settings.scale_length = 1.0
            print(f"   –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: METRIC")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞
            result = {'cameras_imported': 0, 'markers_imported': 0, 'success': True, 'error': ''}
            
            # –ò–º–ø–æ—Ä—Ç –∫–∞–º–µ—Ä
            if props.import_cameras:
                if 'cameras' in data:
                    print(f"\nüì∑ –ò–ú–ü–û–†–¢ –ö–ê–ú–ï–†")
                    print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä –≤ –¥–∞–Ω–Ω—ã—Ö: {len(data['cameras'])}")
                    camera_result = self.import_cameras_from_data(data['cameras'], props)
                    result['cameras_imported'] = camera_result['imported']
                    if not camera_result['success']:
                        result['success'] = False
                        result['error'] += f"–ö–∞–º–µ—Ä—ã: {camera_result['error']}; "
                else:
                    print(f"   ‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –∫–∞–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ")
                    result['error'] += "–ö–∞–º–µ—Ä—ã: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã; "
            
            # –ò–º–ø–æ—Ä—Ç –º–∞—Ä–∫–µ—Ä–æ–≤
            if props.import_markers:
                if 'markers' in data:
                    print(f"\nüéØ –ò–ú–ü–û–†–¢ –ú–ê–†–ö–ï–†–û–í")
                    print(f"   –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö: {len(data['markers'])}")
                    marker_result = self.import_markers_from_data(data['markers'], props)
                    result['markers_imported'] = marker_result['imported']
                    if not marker_result['success']:
                        result['success'] = False
                        result['error'] += f"–ú–∞—Ä–∫–µ—Ä—ã: {marker_result['error']}; "
                else:
                    print(f"   ‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ")
                    result['error'] += "–ú–∞—Ä–∫–µ—Ä—ã: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã; "
            
            print(f"\nüéâ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù")
            print(f"   –ö–∞–º–µ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {result['cameras_imported']}")
            print(f"   –ú–∞—Ä–∫–µ—Ä–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {result['markers_imported']}")
            print(f"   –£—Å–ø–µ—Ö: {result['success']}")
            if result['error']:
                print(f"   –û—à–∏–±–∫–∏: {result['error']}")
            
            if result['success']:
                self.report({'INFO'}, 
                    f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –∫–∞–º–µ—Ä {result['cameras_imported']}, "
                    f"–º–∞—Ä–∫–µ—Ä–æ–≤ {result['markers_imported']}"
                )
                return {'FINISHED'}
            else:
                self.report({'ERROR'}, f"–û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞: {result['error']}")
                return {'CANCELLED'}
                
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
            self.report({'ERROR'}, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
            return {'CANCELLED'}
    
    def find_data_file(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"""
        
        possible_paths = [
            # –í –ø–∞–ø–∫–µ —Å blend —Ñ–∞–π–ª–æ–º
            os.path.join(os.path.dirname(bpy.data.filepath), "blender_aruco_markers.json") if bpy.data.filepath else None,
            os.path.join(os.path.dirname(bpy.data.filepath), "results", "blender_aruco_markers.json") if bpy.data.filepath else None,
            
            # –í —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            os.path.join(os.getcwd(), "blender_aruco_markers.json"),
            os.path.join(os.getcwd(), "results", "blender_aruco_markers.json"),
            
            # –ù–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ
            os.path.join(os.path.expanduser("~"), "Desktop", "blender_aruco_markers.json"),
            os.path.join(os.path.expanduser("~"), "Desktop", "results", "blender_aruco_markers.json"),
        ]
        
        for path in possible_paths:
            if path and os.path.exists(path):
                return path
        
        return None
    
    def import_cameras_from_data(self, cameras_data, props):
        """–ò–º–ø–æ—Ä—Ç –∫–∞–º–µ—Ä –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–º–µ—Ä
            if props.clear_existing:
                self.clear_existing_cameras(props.cameras_collection_name)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collection = ensure_collection(props.cameras_collection_name)
            
            imported_count = 0
            
            for camera_id, camera_info in cameras_data.items():
                try:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã
                    camera_obj = self.create_camera_object(camera_id, camera_info, props)
                    
                    if camera_obj:
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                        collection.objects.link(camera_obj)
                        
                        # –£–±–∏—Ä–∞–µ–º –∏–∑ Scene Collection
                        if camera_obj.name in bpy.context.scene.collection.objects:
                            bpy.context.scene.collection.objects.unlink(camera_obj)
                        
                        imported_count += 1
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã {camera_id}: {e}")
                    continue
            
            return {'success': True, 'imported': imported_count, 'error': ''}
            
        except Exception as e:
            return {'success': False, 'imported': 0, 'error': str(e)}
    
    def create_camera_object(self, camera_id, camera_info, props):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–∞–º–µ—Ä—ã –≤ Blender"""
        
        try:
            pos = camera_info["position"]
            rot = camera_info["rotation"]  # 9-—ç–ª–µ–º–µ–Ω—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ (3x3 –º–∞—Ç—Ä–∏—Ü–∞)
            attrs = camera_info["attributes"]
            validation = camera_info.get("validation", {'is_valid': True, 'warnings': [], 'errors': []})
            
            if len(pos) != 3 or len(rot) != 9:
                print(f"[WARN] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {camera_id}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Position/Rotation")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º rotation –≤ 3x3 Matrix
            C_world = Vector(pos)
            R_w2cv = Matrix((rot[0:3], rot[3:6], rot[6:9]))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã
            cam_data_block = bpy.data.cameras.new(name=camera_id+"_DATA")
            cam_obj = bpy.data.objects.new(name=camera_id, object_data=cam_data_block)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            cam_obj.matrix_world = to_blender_cam_matrix(R_w2cv, C_world)
            
            # === –í–ù–£–¢–†–ï–ù–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ú–ï–†–´ ===
            f35 = float(attrs.get("FocalLength35mm", 0.0) or 0.0)
            if f35 > 0:
                cam_data_block.sensor_fit = 'HORIZONTAL'
                cam_data_block.sensor_width = 36.0
                cam_data_block.lens = f35
            
            # –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ (principal point)
            try:
                ppu = float(attrs.get("PrincipalPointU", ""))
                ppv = float(attrs.get("PrincipalPointV", ""))
                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –º–∞–ª—ã–µ (<0.05), —Å—á–∏—Ç–∞–µ–º –∏—Ö —Å–º–µ—â–µ–Ω–∏–µ–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
                if abs(ppu) < 0.05 and abs(ppv) < 0.05:
                    cam_data_block.shift_x = ppu
                    cam_data_block.shift_y = -ppv
                else:
                    # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω [0..1]
                    cam_data_block.shift_x = (ppu - 0.5)
                    cam_data_block.shift_y = -(ppv - 0.5)
            except Exception:
                pass
            
            # –†–∞–∑–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            cam_obj.empty_display_size = props.camera_size
            
            # === –¶–í–ï–¢ –ü–û –ö–ê–ß–ï–°–¢–í–£ ===
            if props.camera_color_by_quality:
                if not validation['is_valid']:
                    cam_obj.color = (1.0, 0.0, 0.0, 1.0)  # –ö—Ä–∞—Å–Ω—ã–π - –æ—à–∏–±–∫–∏
                elif validation['warnings']:
                    cam_obj.color = (1.0, 0.5, 0.0, 1.0)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                else:
                    cam_obj.color = (0.0, 0.0, 1.0, 1.0)  # –°–∏–Ω–∏–π - –≤–∞–ª–∏–¥–Ω–∞—è
            
            # === –ö–ê–°–¢–û–ú–ù–´–ï –°–í–û–ô–°–¢–í–ê ===
            cam_obj["camera_id"] = camera_id
            cam_obj["focal_length_35mm"] = f35
            cam_obj["principal_point"] = [attrs.get("PrincipalPointU", 0.0), attrs.get("PrincipalPointV", 0.0)]
            cam_obj["distortion_coefficients"] = camera_info.get("distortion", [])
            cam_obj["rc_attributes"] = attrs
            cam_obj["validation_status"] = validation
            
            # === –°–û–ó–î–ê–ù–ò–ï FRUSTUM ===
            if props.show_frustum:
                self.create_camera_frustum(cam_obj, props.frustum_scale, attrs)
            
            return cam_obj
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã {camera_id}: {e}")
            return None
    
    def create_camera_frustum(self, camera_obj, scale, attrs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ä–∞–º–∏–¥—ã –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞–º–µ—Ä—ã"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã
            focal_length = float(attrs.get("FocalLength35mm", 35.0))
            aspect_ratio = float(attrs.get("AspectRatio", 1.0))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ mesh –¥–ª—è frustum
            mesh = bpy.data.meshes.new(f"{camera_obj.name}_Frustum")
            frustum_obj = bpy.data.objects.new(f"{camera_obj.name}_Frustum", mesh)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ frustum
            bm = bmesh.new()
            
            # –†–∞–∑–º–µ—Ä—ã –Ω–∞ –µ–¥–∏–Ω–∏—á–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏
            sensor_width = 36.0  # –º–º
            w = (sensor_width / focal_length) * scale
            h = w / aspect_ratio
            d = scale
            
            # –í–µ—Ä—à–∏–Ω—ã frustum (–ø–∏—Ä–∞–º–∏–¥–∞)
            verts = [
                (0, 0, 0),      # –¶–µ–Ω—Ç—Ä –∫–∞–º–µ—Ä—ã
                (-w, -h, -d),   # –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π
                (w, -h, -d),    # –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π  
                (w, h, -d),     # –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π
                (-w, h, -d),    # –õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π
            ]
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—à–∏–Ω
            for v in verts:
                bm.verts.new(v)
            
            bm.verts.ensure_lookup_table()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–±–µ—Ä frustum
            edges = [
                (0, 1), (0, 2), (0, 3), (0, 4),  # –û—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫ —É–≥–ª–∞–º
                (1, 2), (2, 3), (3, 4), (4, 1),  # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            ]
            
            for edge in edges:
                bm.edges.new([bm.verts[edge[0]], bm.verts[edge[1]]])
            
            bm.to_mesh(mesh)
            bm.free()
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º frustum –∫ –∫–∞–º–µ—Ä–µ
            frustum_obj.parent = camera_obj
            frustum_obj.parent_type = 'OBJECT'
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            frustum_obj.display_type = 'WIRE'
            frustum_obj.color = camera_obj.color
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç—É –∂–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é —á—Ç–æ –∏ –∫–∞–º–µ—Ä–∞
            for collection in camera_obj.users_collection:
                collection.objects.link(frustum_obj)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è frustum –¥–ª—è {camera_obj.name}: {e}")
    
    def clear_existing_cameras(self, collection_name):
        """–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–º–µ—Ä"""
        
        # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–∞–º–µ—Ä –∏ frustums
        bpy.ops.object.select_all(action='DESELECT')
        for obj in bpy.data.objects:
            if obj.type == 'CAMERA' or obj.name.endswith('_Frustum'):
                obj.select_set(True)
        bpy.ops.object.delete()
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if collection_name in bpy.data.collections:
            collection = bpy.data.collections[collection_name]
            bpy.data.collections.remove(collection)
    
    def import_markers_from_data(self, markers_data, props):
        """–ò–º–ø–æ—Ä—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
            if props.clear_existing:
                self.clear_existing_markers(props.markers_collection_name)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collection = ensure_collection(props.markers_collection_name)
            
            total_markers = len(markers_data)
            imported_count = 0
            high_quality_count = 0
            
            for marker_name, marker_info in markers_data.items():
                marker_id = marker_info['id']
                position = marker_info['position']
                confidence = marker_info['confidence']
                quality = marker_info.get('quality', 'unknown')
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
                if confidence < props.min_confidence:
                    continue
                
                if not props.import_low_quality and quality == 'low':
                    continue
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
                marker_obj = self.create_marker_object(
                    marker_id, position, confidence, quality, props
                )
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                collection.objects.link(marker_obj)
                
                # –£–±–∏—Ä–∞–µ–º –∏–∑ Scene Collection
                if marker_obj.name in bpy.context.scene.collection.objects:
                    bpy.context.scene.collection.objects.unlink(marker_obj)
                
                imported_count += 1
                if quality == 'high':
                    high_quality_count += 1
            
            return {
                'success': True,
                'imported': imported_count,
                'total': total_markers,
                'high_quality': high_quality_count,
                'error': ''
            }
            
        except Exception as e:
            return {
                'success': False,
                'imported': 0,
                'total': 0,
                'high_quality': 0,
                'error': str(e)
            }
    
    def clear_existing_markers(self, collection_name):
        """–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ArUco –º–∞—Ä–∫–µ—Ä–æ–≤"""
        
        # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –º–∞—Ä–∫–µ—Ä–æ–≤
        bpy.ops.object.select_all(action='DESELECT')
        for obj in bpy.data.objects:
            if obj.name.startswith('ArUco_Marker_'):
                obj.select_set(True)
        bpy.ops.object.delete()
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if collection_name in bpy.data.collections:
            collection = bpy.data.collections[collection_name]
            bpy.data.collections.remove(collection)
    
    def create_marker_object(self, marker_id, position, confidence, quality, props):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞"""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Empty –æ–±—ä–µ–∫—Ç–∞
        bpy.ops.object.empty_add(
            type=props.empty_type,
            location=tuple(position)
        )
        
        marker_obj = bpy.context.active_object
        marker_obj.name = f"ArUco_Marker_{marker_id:02d}"
        
        # –†–∞–∑–º–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if props.size_by_quality:
            if quality == 'high':
                size = props.marker_size
            elif quality == 'medium':
                size = props.marker_size * 0.8
            else:
                size = props.marker_size * 0.6
        else:
            size = props.marker_size
        
        marker_obj.empty_display_size = size
        
        # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
        if props.color_by_quality:
            if quality == 'high':
                marker_obj.color = (0.0, 1.0, 0.0, 1.0)  # –ó–µ–ª–µ–Ω—ã–π
            elif quality == 'medium':
                marker_obj.color = (1.0, 1.0, 0.0, 1.0)  # –ñ–µ–ª—Ç—ã–π
            else:
                marker_obj.color = (1.0, 0.5, 0.0, 1.0)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        marker_obj["aruco_id"] = marker_id
        marker_obj["confidence"] = confidence
        marker_obj["quality"] = quality
        marker_obj["triangulated_position"] = position
        
        return marker_obj


class ARUCO_OT_auto_find_file(Operator):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    bl_idname = "aruco.auto_find_file"
    bl_label = "Auto Find"
    bl_description = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª blender_aruco_markers.json"
    
    def execute(self, context):
        props = context.scene.aruco_importer
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞
        importer = ARUCO_OT_import_scene()
        found_file = importer.find_data_file()
        
        if found_file:
            props.filepath = found_file
            self.report({'INFO'}, f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {os.path.basename(found_file)}")
        else:
            self.report({'WARNING'}, "–§–∞–π–ª blender_aruco_markers.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return {'FINISHED'}


class ARUCO_OT_create_preview_mesh(Operator):
    """–°–æ–∑–¥–∞–Ω–∏–µ preview mesh –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤"""
    
    bl_idname = "aruco.create_preview_mesh"
    bl_label = "Create Preview Meshes"
    bl_description = "–°–æ–∑–¥–∞—Ç—å preview mesh –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤"
    
    def execute(self, context):
        selected_markers = [obj for obj in context.selected_objects 
                          if obj.name.startswith('ArUco_Marker_')]
        
        if not selected_markers:
            self.report({'WARNING'}, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ä—ã ArUco")
            return {'CANCELLED'}
        
        for marker in selected_markers:
            self.create_marker_mesh(marker)
        
        self.report({'INFO'}, f"–°–æ–∑–¥–∞–Ω–æ {len(selected_markers)} preview mesh")
        return {'FINISHED'}
    
    def create_marker_mesh(self, marker_obj):
        """–°–æ–∑–¥–∞–Ω–∏–µ mesh –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞"""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ mesh
        mesh = bpy.data.meshes.new(f"ArUco_Mesh_{marker_obj['aruco_id']}")
        mesh_obj = bpy.data.objects.new(f"ArUco_Mesh_{marker_obj['aruco_id']}", mesh)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∫–≤–∞–¥—Ä–∞—Ç–∞
        bm = bmesh.new()
        bmesh.ops.create_cube(bm, size=0.1)
        bm.to_mesh(mesh)
        bm.free()
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        mesh_obj.location = marker_obj.location
        mesh_obj.rotation_euler = marker_obj.rotation_euler
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç—É –∂–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        for collection in marker_obj.users_collection:
            collection.objects.link(mesh_obj)


class ARUCO_PT_main_panel(Panel):
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å ArUco –∏–º–ø–æ—Ä—Ç–∞"""
    
    bl_label = "ArUco Scene Import"
    bl_idname = "ARUCO_PT_main_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = "ArUco"
    
    def draw(self, context):
        layout = self.layout
        props = context.scene.aruco_importer
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        layout.label(text="Cameras + Markers Import", icon='OUTLINER_OB_CAMERA')
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        box = layout.box()
        box.label(text="–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö:")
        row = box.row(align=True)
        row.prop(props, "filepath", text="")
        row.operator("aruco.auto_find_file", text="", icon='VIEWZOOM')
        
        # –ß—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        box = layout.box()
        box.label(text="–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:")
        row = box.row()
        row.prop(props, "import_cameras")
        row.prop(props, "import_markers")
        
        # –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
        layout.separator()
        row = layout.row()
        row.scale_y = 1.5
        if props.filepath and os.path.exists(props.filepath):
            row.operator("aruco.import_scene", text="Import Scene", icon='IMPORT')
        else:
            op = row.operator("aruco.import_scene", text="Choose File & Import", icon='FILEBROWSER')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        if props.filepath:
            if os.path.exists(props.filepath):
                layout.label(text=f"‚úì {os.path.basename(props.filepath)}", icon='CHECKMARK')
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –º–æ–∂–µ–º
                try:
                    with open(props.filepath, 'r') as f:
                        data = json.load(f)
                    metadata = data.get('metadata', {})
                    
                    info_box = layout.box()
                    if 'total_cameras' in metadata:
                        info_box.label(text=f"üì∑ –ö–∞–º–µ—Ä: {metadata['total_cameras']}")
                    if 'total_markers' in metadata:
                        info_box.label(text=f"üéØ –ú–∞—Ä–∫–µ—Ä–æ–≤: {metadata['total_markers']}")
                    if 'high_confidence_markers' in metadata:
                        info_box.label(text=f"üü¢ –í—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {metadata['high_confidence_markers']}")
                        
                except:
                    pass
            else:
                layout.label(text="‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", icon='ERROR')


class ARUCO_PT_cameras_panel(Panel):
    """–ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–º–µ—Ä"""
    
    bl_label = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä"
    bl_idname = "ARUCO_PT_cameras_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = "ArUco"
    bl_parent_id = "ARUCO_PT_main_panel"
    bl_options = {'DEFAULT_CLOSED'}
    
    def draw(self, context):
        layout = self.layout
        props = context.scene.aruco_importer
        
        layout.enabled = props.import_cameras
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä
        box = layout.box()
        box.label(text="–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
        box.prop(props, "camera_size")
        box.prop(props, "show_frustum")
        if props.show_frustum:
            box.prop(props, "frustum_scale")
        box.prop(props, "camera_color_by_quality")
        
        # –ö–æ–ª–ª–µ–∫—Ü–∏—è
        box = layout.box()
        box.label(text="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:")
        box.prop(props, "cameras_collection_name")


class ARUCO_PT_markers_panel(Panel):
    """–ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Ä–∫–µ—Ä–æ–≤"""
    
    bl_label = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤"
    bl_idname = "ARUCO_PT_markers_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = "ArUco"
    bl_parent_id = "ARUCO_PT_main_panel"
    bl_options = {'DEFAULT_CLOSED'}
    
    def draw(self, context):
        layout = self.layout
        props = context.scene.aruco_importer
        
        layout.enabled = props.import_markers
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
        box = layout.box()
        box.label(text="–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ:")
        box.prop(props, "empty_type")
        box.prop(props, "marker_size")
        box.prop(props, "size_by_quality")
        box.prop(props, "color_by_quality")
        
        # –§–∏–ª—å—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
        box = layout.box()
        box.label(text="–§–∏–ª—å—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞:")
        box.prop(props, "import_low_quality")
        box.prop(props, "min_confidence")
        
        # –ö–æ–ª–ª–µ–∫—Ü–∏—è
        box = layout.box()
        box.label(text="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:")
        box.prop(props, "markers_collection_name")


class ARUCO_PT_general_panel(Panel):
    """–ü–∞–Ω–µ–ª—å –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    bl_label = "–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    bl_idname = "ARUCO_PT_general_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = "ArUco"
    bl_parent_id = "ARUCO_PT_main_panel"
    bl_options = {'DEFAULT_CLOSED'}
    
    def draw(self, context):
        layout = self.layout
        props = context.scene.aruco_importer
        
        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        box = layout.box()
        box.label(text="–ò–º–ø–æ—Ä—Ç:")
        box.prop(props, "clear_existing")


class ARUCO_PT_tools_panel(Panel):
    """–ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    bl_label = "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
    bl_idname = "ARUCO_PT_tools_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = "ArUco"
    bl_parent_id = "ARUCO_PT_main_panel"
    bl_options = {'DEFAULT_CLOSED'}
    
    def draw(self, context):
        layout = self.layout
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
        layout.operator("aruco.create_preview_mesh", icon='MESH_CUBE')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
        selected_cameras = [obj for obj in context.selected_objects 
                          if obj.type == 'CAMERA']
        selected_markers = [obj for obj in context.selected_objects 
                          if obj.name.startswith('ArUco_Marker_')]
        
        if selected_cameras or selected_markers:
            box = layout.box()
            box.label(text="–í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:")
            
            if selected_cameras:
                box.label(text=f"üì∑ –ö–∞–º–µ—Ä: {len(selected_cameras)}")
                for cam in selected_cameras[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    box.label(text=f"   {cam.name}")
                if len(selected_cameras) > 3:
                    box.label(text=f"   ... –∏ –µ—â–µ {len(selected_cameras) - 3}")
            
            if selected_markers:
                box.label(text=f"üéØ –ú–∞—Ä–∫–µ—Ä–æ–≤: {len(selected_markers)}")
                for marker in selected_markers[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    quality = marker.get('quality', '?')
                    box.label(text=f"   ID {marker.get('aruco_id', '?')} ({quality})")
                if len(selected_markers) > 3:
                    box.label(text=f"   ... –∏ –µ—â–µ {len(selected_markers) - 3}")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤
classes = [
    ArUcoImporterProperties,
    ARUCO_OT_import_scene,
    ARUCO_OT_auto_find_file,
    ARUCO_OT_create_preview_mesh,
    ARUCO_PT_main_panel,
    ARUCO_PT_cameras_panel,
    ARUCO_PT_markers_panel,
    ARUCO_PT_general_panel,
    ARUCO_PT_tools_panel,
]


def register():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è addon"""
    for cls in classes:
        bpy.utils.register_class(cls)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–≤–æ–π—Å—Ç–≤
    bpy.types.Scene.aruco_importer = bpy.props.PointerProperty(
        type=ArUcoImporterProperties
    )
    
    print("ArUco Cameras + Markers Importer addon –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")


def unregister():
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ addon"""
    for cls in reversed(classes):
        bpy.utils.unregister_class(cls)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤
    del bpy.types.Scene.aruco_importer
    
    print("ArUco Cameras + Markers Importer addon —É–¥–∞–ª–µ–Ω")


if __name__ == "__main__":
    register()