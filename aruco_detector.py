#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π ArUco –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–±–æ—á–µ–≥–æ –∫–æ–¥–∞ –∏–∑ test.py
============================================================

–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –∞–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏.
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–º –∫–æ–¥–µ –∏–∑ test.py —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    from aruco_detector_simple import SimpleArUcoDetector
    
    detector = SimpleArUcoDetector()
    results = detector.detect_markers_in_directory("data")
"""

import cv2
import os
import glob
import json
import numpy as np
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass


@dataclass
class MarkerDetection:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Ä–∫–µ—Ä–µ"""
    marker_id: int
    center: Tuple[float, float]
    corners: List[List[float]]  # 4 —É–≥–ª–∞ [[x1,y1], [x2,y2], [x3,y3], [x4,y4]]
    area: float
    

class SimpleArUcoDetector:
    """
    –ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä ArUco –º–∞—Ä–∫–µ—Ä–æ–≤
    –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ –∏–∑ test.py —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
    """
    
    def __init__(self, enable_logging: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        
        Parameters:
        -----------
        dictionary_type : int, optional
            –¢–∏–ø —Å–ª–æ–≤–∞—Ä—è ArUco. –ï—Å–ª–∏ None, –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        enable_logging : bool
            –í–∫–ª—é—á–∏—Ç—å –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        """
        self.enable_logging = enable_logging
        
        self.dictionary_type = cv2.aruco.DICT_4X4_1000
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ (–∫–∞–∫ –≤ test.py)
        self.aruco_dict = cv2.aruco.getPredefinedDictionary(self.dictionary_type)
        self.parameters = cv2.aruco.DetectorParameters()
        self.detector = cv2.aruco.ArucoDetector(self.aruco_dict, self.parameters)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.detection_stats = {
            'total_images': 0,
            'images_with_markers': 0,
            'total_markers_found': 0,
            'unique_marker_ids': set(),
            'failed_images': []
        }
        
        if self.enable_logging:
            dict_name = self._get_dictionary_name(self.dictionary_type)
            print(f"üîß ArUco –¥–µ—Ç–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å–ª–æ–≤–∞—Ä–µ–º: {dict_name}")
    
    def _get_dictionary_name(self, dict_type: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –ø–æ –µ–≥–æ —Ç–∏–ø—É"""
        dict_names = {
            cv2.aruco.DICT_4X4_50: "DICT_4X4_50",
            cv2.aruco.DICT_4X4_100: "DICT_4X4_100",
            cv2.aruco.DICT_4X4_250: "DICT_4X4_250", 
            cv2.aruco.DICT_4X4_1000: "DICT_4X4_1000",
            cv2.aruco.DICT_5X5_50: "DICT_5X5_50",
            cv2.aruco.DICT_5X5_100: "DICT_5X5_100",
            cv2.aruco.DICT_5X5_250: "DICT_5X5_250",
            cv2.aruco.DICT_5X5_1000: "DICT_5X5_1000",
            cv2.aruco.DICT_6X6_50: "DICT_6X6_50",
            cv2.aruco.DICT_6X6_100: "DICT_6X6_100",
            cv2.aruco.DICT_6X6_250: "DICT_6X6_250",
            cv2.aruco.DICT_6X6_1000: "DICT_6X6_1000",
        }
        return dict_names.get(dict_type, f"UNKNOWN_{dict_type}")
    
    def detect_markers_in_image(self, image_path: str) -> Dict[int, MarkerDetection]:
        """
        –î–µ—Ç–µ–∫—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ test.py)
        
        Parameters:
        -----------
        image_path : str
            –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            
        Returns:
        --------
        Dict[int, MarkerDetection]
            –°–ª–æ–≤–∞—Ä—å –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ {marker_id: MarkerDetection}
        """
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞–∫ –≤ test.py)
            img = cv2.imread(image_path)
            if img is None:
                if self.enable_logging:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {image_path}")
                self.detection_stats['failed_images'].append(image_path)
                return {}
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–µ—Ä—ã–π (–∫–∞–∫ –≤ test.py)
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            
            # –ü–æ–∏—Å–∫ –º–∞—Ä–∫–µ—Ä–æ–≤ (–∫–∞–∫ –≤ test.py)
            corners, ids, rejected = self.detector.detectMarkers(gray)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            detections = {}
            
            if ids is not None and len(ids) > 0:
                for i, marker_id in enumerate(ids.flatten()):
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–≥–ª–æ–≤ –º–∞—Ä–∫–µ—Ä–∞
                    marker_corners = corners[i].reshape(4, 2)
                    
                    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞
                    center_x = float(np.mean(marker_corners[:, 0]))
                    center_y = float(np.mean(marker_corners[:, 1]))
                    
                    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏
                    area = float(cv2.contourArea(marker_corners))
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
                    detection = MarkerDetection(
                        marker_id=int(marker_id),
                        center=(center_x, center_y),
                        corners=marker_corners.tolist(),
                        area=area
                    )
                    
                    detections[int(marker_id)] = detection
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.detection_stats['total_markers_found'] += len(detections)
                self.detection_stats['unique_marker_ids'].update(detections.keys())
                self.detection_stats['images_with_markers'] += 1
                
                if self.enable_logging:
                    filename = os.path.basename(image_path)
                    marker_ids = list(detections.keys())
                    print(f"‚úÖ {filename}: –Ω–∞–π–¥–µ–Ω–æ {len(marker_ids)} –º–∞—Ä–∫–µ—Ä–æ–≤ {marker_ids}")
            else:
                if self.enable_logging:
                    filename = os.path.basename(image_path)
                    print(f"‚ö™ {filename}: –º–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            self.detection_stats['total_images'] += 1
            return detections
            
        except Exception as e:
            if self.enable_logging:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {image_path}: {e}")
            self.detection_stats['failed_images'].append(image_path)
            return {}
    
    def detect_markers_in_directory(self, directory: str) -> Dict[str, Dict[int, MarkerDetection]]:
        """
        –î–µ—Ç–µ–∫—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –≤–æ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
        Parameters:
        -----------
        directory : str
            –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            
        Returns:
        --------
        Dict[str, Dict[int, MarkerDetection]]
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã {camera_id: {marker_id: MarkerDetection}}
        """
        if self.enable_logging:
            print(f"üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ {directory}")
        
        # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ test.py)
        image_extensions = ["*.jpg", "*.jpeg", "*.png", "*.bmp"]
        images = []
        
        for ext in image_extensions:
            pattern = os.path.join(directory, ext)
            images.extend(glob.glob(pattern))
            # –¢–∞–∫–∂–µ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            pattern_upper = os.path.join(directory, ext.upper())
            images.extend(glob.glob(pattern_upper))
        
        images = sorted(list(set(images)))  # —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        
        if not images:
            if self.enable_logging:
                print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {directory}")
            return {}
        
        if self.enable_logging:
            print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            print("-" * 40)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        all_detections = {}
        
        for image_path in images:
            # –ü–æ–ª—É—á–∞–µ–º camera_id –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
            filename = os.path.basename(image_path)
            camera_id = os.path.splitext(filename)[0]
            
            # –î–µ—Ç–µ–∫—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
            detections = self.detect_markers_in_image(image_path)
            all_detections[camera_id] = detections
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if self.enable_logging:
            self._print_detection_summary(all_detections)
        
        return all_detections
    
    def _print_detection_summary(self, all_detections: Dict[str, Dict[int, MarkerDetection]]) -> None:
        """–ü–µ—á–∞—Ç—å —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        
        print(f"\n{'='*60}")
        print("üìä –°–í–û–î–ö–ê –î–ï–¢–ï–ö–¶–ò–ò –ú–ê–†–ö–ï–†–û–í")
        print(f"{'='*60}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_cameras = len(all_detections)
        cameras_with_markers = len([d for d in all_detections.values() if d])
        total_detections = sum(len(detections) for detections in all_detections.values())
        unique_markers = len(self.detection_stats['unique_marker_ids'])
        
        print(f"üé• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–º–µ—Ä: {total_cameras}")
        print(f"‚úÖ –ö–∞–º–µ—Ä —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏: {cameras_with_markers}")
        print(f"üè∑Ô∏è  –í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ü–∏–π: {total_detections}")
        print(f"üî¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: {unique_markers}")
        
        if total_cameras > 0:
            success_rate = (cameras_with_markers / total_cameras) * 100
            avg_markers = total_detections / cameras_with_markers if cameras_with_markers > 0 else 0
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞–º–µ—Ä—É: {avg_markers:.1f}")
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
        if unique_markers > 0:
            sorted_markers = sorted(self.detection_stats['unique_marker_ids'])
            print(f"üÜî ID –º–∞—Ä–∫–µ—Ä–æ–≤: {sorted_markers}")
        
        # –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
        marker_frequency = {}
        for detections in all_detections.values():
            for marker_id in detections.keys():
                marker_frequency[marker_id] = marker_frequency.get(marker_id, 0) + 1
        
        if marker_frequency:
            print(f"\nüìä –ß–ê–°–¢–û–¢–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø:")
            for marker_id in sorted(marker_frequency.keys()):
                frequency = marker_frequency[marker_id]
                percentage = (frequency / total_cameras) * 100
                triangulatable = "‚úÖ" if frequency >= 3 else "‚ö†Ô∏è" if frequency >= 2 else "‚ùå"
                print(f"   –ú–∞—Ä–∫–µ—Ä {marker_id:2d}: {frequency:2d}/{total_cameras} –∫–∞–º–µ—Ä ({percentage:5.1f}%) {triangulatable}")
        
        # –ö–∞–º–µ—Ä—ã –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤
        failed_cameras = [cam_id for cam_id, detections in all_detections.items() if not detections]
        if failed_cameras:
            print(f"\n‚ö†Ô∏è  –ö–∞–º–µ—Ä—ã –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤: {failed_cameras}")
    
    def save_results_to_json(self, detections: Dict[str, Dict[int, MarkerDetection]], 
                           output_path: str) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª
        
        Parameters:
        -----------
        detections : dict
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
        output_path : str
            –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞
        """
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è JSON
        json_data = {
            'metadata': {
                'detector_version': 'simple_1.0',
                'dictionary': self._get_dictionary_name(self.dictionary_type),
                'total_cameras': len(detections),
                'cameras_with_markers': len([d for d in detections.values() if d]),
                'unique_markers': len(self.detection_stats['unique_marker_ids']),
                'total_detections': sum(len(d) for d in detections.values())
            },
            'cameras': {}
        }
        
        for camera_id, camera_detections in detections.items():
            json_data['cameras'][camera_id] = {}
            
            for marker_id, detection in camera_detections.items():
                json_data['cameras'][camera_id][str(marker_id)] = {
                    'center': detection.center,
                    'corners': detection.corners,
                    'area': detection.area
                }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(json_data, f, indent=2, ensure_ascii=False)
        
        if self.enable_logging:
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
    
    def get_detection_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        stats = self.detection_stats.copy()
        stats['unique_marker_ids'] = sorted(list(stats['unique_marker_ids']))
        return stats


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

def detect_markers_simple(image_path: str, dictionary_type: int = cv2.aruco.DICT_4X4_1000) -> Dict[int, Tuple[float, float]]:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º API)
    
    Parameters:
    -----------
    image_path : str
        –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    dictionary_type : int
        –¢–∏–ø —Å–ª–æ–≤–∞—Ä—è ArUco
        
    Returns:
    --------
    Dict[int, Tuple[float, float]]
        –°–ª–æ–≤–∞—Ä—å {marker_id: (center_x, center_y)}
    """
    detector = SimpleArUcoDetector(dictionary_type, enable_logging=False)
    detections = detector.detect_markers_in_image(image_path)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    return {
        marker_id: detection.center 
        for marker_id, detection in detections.items()
    }


def test_detection_on_directory(directory: str = "data", output_file: str = "detection_results.json") -> Dict:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Parameters:
    -----------
    directory : str
        –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    output_file : str
        –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
    Returns:
    --------
    dict
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
    """
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–¢–ï–ö–¶–ò–ò ARUCO –ú–ê–†–ö–ï–†–û–í")
    print("=" * 50)
    print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    detector = SimpleArUcoDetector(enable_logging=True)
    
    # –î–µ—Ç–µ–∫—Ü–∏—è
    detections = detector.detect_markers_in_directory(directory)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if detections:
        detector.save_results_to_json(detections, output_file)
    
    # –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    return detections


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è
def main():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="–ü—Ä–æ—Å—Ç–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ test.py)"
    )
    
    parser.add_argument(
        '--input', '-i',
        default='data',
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data)'
    )
    
    parser.add_argument(
        '--output', '-o',
        default='detection_results.json',
        help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: detection_results.json)'
    )
    
    parser.add_argument(
        '--dictionary',
        choices=['4x4_50', '4x4_100', '4x4_250', '4x4_1000'],
        default='4x4_1000',
        help='–°–ª–æ–≤–∞—Ä—å ArUco (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 4x4_1000 –∫–∞–∫ –≤ test.py)'
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
    dict_mapping = {
        '4x4_50': cv2.aruco.DICT_4X4_50,
        '4x4_100': cv2.aruco.DICT_4X4_100,
        '4x4_250': cv2.aruco.DICT_4X4_250,
        '4x4_1000': cv2.aruco.DICT_4X4_1000,
    }
    
    dictionary_type = dict_mapping[args.dictionary]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(args.input):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.input}")
        return 1
    
    # –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏
    detector = SimpleArUcoDetector(dictionary_type, enable_logging=True)
    detections = detector.detect_markers_in_directory(args.input)
    
    if detections:
        detector.save_results_to_json(detections, args.output)
        print(f"\n‚úÖ –î–µ—Ç–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
        stats = detector.get_detection_statistics()
        triangulatable_markers = sum(
            1 for marker_id in stats['unique_marker_ids']
            if sum(1 for detections in detections.values() if marker_id in detections) >= 3
        )
        
        print(f"\nüéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏:")
        print(f"   –ú–∞—Ä–∫–µ—Ä–æ–≤ –≤–∏–¥–∏–º—ã—Ö –Ω–∞ ‚â•3 –∫–∞–º–µ—Ä–∞—Ö: {triangulatable_markers}")
        
        if triangulatable_markers >= 5:
            print("   ‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏")
        elif triangulatable_markers >= 3:
            print("   ‚ö†Ô∏è  –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏")
        else:
            print("   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏")
    else:
        print(f"\n‚ùå –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())
