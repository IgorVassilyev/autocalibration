#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π –∏–º–ø–æ—Ä—Ç–µ—Ä –∫–∞–º–µ—Ä –∏ ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è Blender
================================================

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
1. –ò–º–ø–æ—Ä—Ç –∫–∞–º–µ—Ä –∏–∑ XMP —Ñ–∞–π–ª–æ–≤ RealityCapture (–∏–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞)
2. –ò–º–ø–æ—Ä—Ç ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã FOLDER –∏ MARKERS_FILE –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ Text Editor Blender
"""

import os
import math
import json
import xml.etree.ElementTree as ET
from mathutils import Matrix, Vector
import bpy
import traceback

# ---- CONFIG ----
FOLDER = r"C:\Users\admin\PycharmProjects\autocalibration\data"  # –ü–∞–ø–∫–∞ —Å XMP —Ñ–∞–π–ª–∞–º–∏
MARKERS_FILE = r"C:\Users\admin\PycharmProjects\autocalibration\results\blender_aruco_markers.json"  # –§–∞–π–ª —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
# ----------------

RC_NS = {"rdf":"http://www.w3.org/1999/02/22-rdf-syntax-ns#", "xcr":"http://www.capturingreality.com/ns/xcr/1.1#"}

def _floats(s):
    """–ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–µ–ª –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    return [float(x) for x in str(s).strip().split()] if s is not None else []

def parse_rc_xmp(path):
    """–ü–∞—Ä—Å–∏–Ω–≥ XMP —Ñ–∞–π–ª–∞ RealityCapture"""
    tree = ET.parse(path)
    root = tree.getroot()
    desc = root.find(".//rdf:Description", RC_NS)
    if desc is None:
        return None
    
    pos = _floats(desc.findtext("xcr:Position", default="", namespaces=RC_NS))
    rot = _floats(desc.findtext("xcr:Rotation", default="", namespaces=RC_NS))
    dist = _floats(desc.findtext("xcr:DistortionCoeficients", default="", namespaces=RC_NS))
    attrs = {k.split('}')[1]: v for k, v in desc.attrib.items() if k.startswith('{'+RC_NS['xcr']+'}')}
    
    return {
        "path": path, 
        "name": os.path.splitext(os.path.basename(path))[0],
        "position": pos, 
        "rotation": rot, 
        "dist": dist, 
        "attrs": attrs
    }

def to_blender_cam_matrix(R_w2cv_3x3, C_world_vec3):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –∫–∞–º–µ—Ä—ã RealityCapture –≤ Blender"""
    # OpenCV: +X right, +Y down, +Z forward
    # Blender cam: +X right, +Y up, +Z backward (looks along -Z)
    R_bcam2cv = Matrix(((1,0,0),(0,-1,0),(0,0,-1)))
    R_cv2bcam = R_bcam2cv.transposed()

    # world -> blender_cam
    R_w2bcam = R_cv2bcam @ R_w2cv_3x3

    # Blender needs object matrix (local->world): invert rotation to get blender_cam->world
    R_bcam2w = R_w2bcam.transposed()  # rotation, so inverse == transpose

    # Build 4x4 safely
    M = R_bcam2w.to_4x4()
    M.translation = Vector(C_world_vec3)
    return M

def ensure_collection(name):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    coll = bpy.data.collections.get(name)
    if not coll:
        coll = bpy.data.collections.new(name)
        bpy.context.scene.collection.children.link(coll)
    return coll

def create_camera(cam_data, collection):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–∞–º–µ—Ä—ã –≤ Blender"""
    name = cam_data["name"]
    pos = cam_data["position"]
    rot = cam_data["rotation"]
    attrs = cam_data["attrs"]

    if len(pos) != 3 or len(rot) != 9:
        print(f"[WARN] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É {name}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Position/Rotation (pos={len(pos)} rot={len(rot)})")
        return None

    C_world = Vector(pos)
    R_w2cv = Matrix((rot[0:3], rot[3:6], rot[6:9]))

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–∞–º–µ—Ä—ã
    cam_data_block = bpy.data.cameras.new(name=name+"_DATA")
    cam_obj = bpy.data.objects.new(name=name, object_data=cam_data_block)
    collection.objects.link(cam_obj)

    # –í–Ω–µ—à–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    cam_obj.matrix_world = to_blender_cam_matrix(R_w2cv, C_world)

    # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    f35 = float(attrs.get("FocalLength35mm", 0.0) or 0.0)
    if f35 > 0:
        cam_data_block.sensor_fit = 'HORIZONTAL'
        cam_data_block.sensor_width = 36.0
        cam_data_block.lens = f35

    # –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ (Principal point)
    try:
        ppu = float(attrs.get("PrincipalPointU", ""))
        ppv = float(attrs.get("PrincipalPointV", ""))
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –º–∞–ª—ã (<0.05), —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∫–∞–∫ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
        if abs(ppu) < 0.05 and abs(ppv) < 0.05:
            cam_data_block.shift_x = ppu
            cam_data_block.shift_y = -ppv
        else:
            # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω [0..1]
            cam_data_block.shift_x = (ppu - 0.5)
            cam_data_block.shift_y = -(ppv - 0.5)
    except Exception:
        pass

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    cam_obj["RC_attrs"] = attrs
    cam_obj["RC_distortion"] = cam_data["dist"]
    
    return cam_obj

def create_marker(marker_id, marker_data, collection, settings):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ ArUco –º–∞—Ä–∫–µ—Ä–∞ –≤ Blender"""
    name = f"ArUco_Marker_{marker_id:02d}"
    position = marker_data['position']
    confidence = marker_data['confidence']
    quality = marker_data.get('quality', 'unknown')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ Empty –æ–±—ä–µ–∫—Ç–∞
    bpy.ops.object.empty_add(
        type=settings['empty_type'],
        location=tuple(position)
    )
    
    marker_obj = bpy.context.active_object
    marker_obj.name = name
    
    # –†–∞–∑–º–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
    if settings['size_by_quality']:
        if quality == 'high':
            size = settings['marker_size']
        elif quality == 'medium':
            size = settings['marker_size'] * 0.8
        else:
            size = settings['marker_size'] * 0.6
    else:
        size = settings['marker_size']
    
    marker_obj.empty_display_size = size
    
    # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
    if settings['color_by_quality']:
        if quality == 'high':
            marker_obj.color = (0.0, 1.0, 0.0, 1.0)  # –ó–µ–ª–µ–Ω—ã–π
        elif quality == 'medium':
            marker_obj.color = (1.0, 1.0, 0.0, 1.0)  # –ñ–µ–ª—Ç—ã–π
        else:
            marker_obj.color = (1.0, 0.5, 0.0, 1.0)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
    
    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    marker_obj["aruco_id"] = marker_id
    marker_obj["confidence"] = confidence
    marker_obj["quality"] = quality
    marker_obj["triangulated_position"] = position
    
    # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
    collection.objects.link(marker_obj)
    
    # –£–±–∏—Ä–∞–µ–º –∏–∑ Scene Collection
    if marker_obj.name in bpy.context.scene.collection.objects:
        bpy.context.scene.collection.objects.unlink(marker_obj)
    
    return marker_obj

def import_cameras(folder):
    """–ò–º–ø–æ—Ä—Ç –∫–∞–º–µ—Ä –∏–∑ XMP —Ñ–∞–π–ª–æ–≤"""
    print("üé• –ò–º–ø–æ—Ä—Ç –∫–∞–º–µ—Ä –∏–∑ XMP —Ñ–∞–π–ª–æ–≤...")
    
    if not folder or not os.path.isdir(folder):
        print(f"[ERROR] –ù–µ–≤–µ—Ä–Ω–∞—è –ø–∞–ø–∫–∞: {folder}")
        return []

    xmp_paths = [os.path.join(folder, f) for f in os.listdir(folder) if f.lower().endswith(".xmp")]
    if not xmp_paths:
        print(f"[ERROR] XMP —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤: {folder}")
        return []

    coll = ensure_collection("RealityCapture_Cameras")
    imported = []
    
    for p in sorted(xmp_paths):
        try:
            data = parse_rc_xmp(p)
            if data:
                cam = create_camera(data, coll)
                if cam:
                    imported.append(cam.name)
        except Exception as e:
            print(f"[ERROR] {p}: {e}")
            print(traceback.format_exc())

    print(f"   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–º–µ—Ä: {len(imported)} –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é '{coll.name}'")
    return imported

def import_markers(markers_file):
    """–ò–º–ø–æ—Ä—Ç ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    print("üè∑Ô∏è  –ò–º–ø–æ—Ä—Ç ArUco –º–∞—Ä–∫–µ—Ä–æ–≤...")
    
    if not markers_file or not os.path.exists(markers_file):
        print(f"[ERROR] –§–∞–π–ª —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {markers_file}")
        return []
    
    try:
        with open(markers_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –º–∞—Ä–∫–µ—Ä–æ–≤: {e}")
        return []
    
    markers_data = data.get('markers', {})
    if not markers_data:
        print("[ERROR] –î–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ")
        return []
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
    marker_settings = {
        'empty_type': 'PLAIN_AXES',
        'marker_size': 0.1,
        'size_by_quality': True,
        'color_by_quality': True
    }
    
    coll = ensure_collection("ArUco_Markers")
    imported = []
    high_quality_count = 0
    
    for marker_name, marker_info in markers_data.items():
        try:
            marker_id = marker_info['id']
            confidence = marker_info['confidence']
            quality = marker_info.get('quality', 'unknown')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
            marker_obj = create_marker(marker_id, marker_info, coll, marker_settings)
            imported.append(marker_obj.name)
            
            if quality == 'high':
                high_quality_count += 1
                
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ {marker_name}: {e}")
            continue
    
    print(f"   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {len(imported)} (–≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {high_quality_count})")
    print(f"   –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é '{coll.name}'")
    return imported

def setup_scene():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
    bpy.context.scene.unit_settings.system = 'METRIC'
    bpy.context.scene.unit_settings.scale_length = 1.0
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    bpy.ops.object.select_all(action='DESELECT')

def clear_existing_data():
    """–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–º–µ—Ä –∏ –º–∞—Ä–∫–µ—Ä–æ–≤"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–∞–º–µ—Ä
    cameras_to_delete = [obj for obj in bpy.data.objects if obj.type == 'CAMERA']
    for cam in cameras_to_delete:
        bpy.data.objects.remove(cam, do_unlink=True)
    
    # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –º–∞—Ä–∫–µ—Ä–æ–≤
    markers_to_delete = [obj for obj in bpy.data.objects if obj.name.startswith('ArUco_Marker_')]
    for marker in markers_to_delete:
        bpy.data.objects.remove(marker, do_unlink=True)
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    collections_to_remove = ['RealityCapture_Cameras', 'ArUco_Markers']
    for coll_name in collections_to_remove:
        if coll_name in bpy.data.collections:
            coll = bpy.data.collections[coll_name]
            bpy.data.collections.remove(coll)
    
    print("   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞"""
    print("="*60)
    print("üöÄ –ï–î–ò–ù–´–ô –ò–ú–ü–û–†–¢–ï–† –ö–ê–ú–ï–† –ò ARUCO –ú–ê–†–ö–ï–†–û–í")
    print("="*60)
    print(f"üìÇ –ü–∞–ø–∫–∞ XMP: {FOLDER}")
    print(f"üè∑Ô∏è  –§–∞–π–ª –º–∞—Ä–∫–µ—Ä–æ–≤: {MARKERS_FILE}")
    print("="*60)
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω—ã
        setup_scene()
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        clear_existing_data()
        
        # –ò–º–ø–æ—Ä—Ç –∫–∞–º–µ—Ä
        imported_cameras = import_cameras(FOLDER)
        
        # –ò–º–ø–æ—Ä—Ç –º–∞—Ä–∫–µ—Ä–æ–≤
        imported_markers = import_markers(MARKERS_FILE)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"   üé• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–º–µ—Ä: {len(imported_cameras)}")
        print(f"   üè∑Ô∏è  –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {len(imported_markers)}")
        
        if imported_cameras or imported_markers:
            print("\nüìã –ö–û–õ–õ–ï–ö–¶–ò–ò BLENDER:")
            if imported_cameras:
                print("   ‚Ä¢ RealityCapture_Cameras - –∫–∞–º–µ—Ä—ã –∏–∑ XMP")
            if imported_markers:
                print("   ‚Ä¢ ArUco_Markers - —Ç—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã")
                print("     üü¢ –ó–µ–ª–µ–Ω—ã–µ - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
                print("     üü° –ñ–µ–ª—Ç—ã–µ - —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
                print("     üü† –û—Ä–∞–Ω–∂–µ–≤—ã–µ - –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
        else:
            print("\n‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
            
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print(traceback.format_exc())

if __name__ == "__main__":
    main()