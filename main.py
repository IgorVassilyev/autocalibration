#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ ArUco –º–∞—Ä–∫–µ—Ä–æ–≤
=============================================================

–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ—Ç XMP —Ñ–∞–π–ª–æ–≤ –¥–æ 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è Blender:
1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –∏–∑ XMP —Ñ–∞–π–ª–æ–≤
2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
3. –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ (DICT_4X4_1000, ID 1-13)
4. 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ Blender addon

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py
"""

import os
import sys
import json
import time

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from xmp_parser import SimpleXMPParser
    from xmp_to_opencv import convert_cameras_to_opencv
    from aruco_detector import SimpleArUcoDetector
    from triangulation import triangulate_markers, prepare_blender_export
    from config import CURRENT_IMAGE_SIZE
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    print("  - xmp_parser.py, xmp_to_opencv.py, aruco_detector.py")
    print("  - triangulation.py, config.py")
    sys.exit(1)


def validate_input_data(data_dir: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not os.path.exists(data_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {data_dir}")
        return False
    
    # –ü–æ–∏—Å–∫ XMP —Ñ–∞–π–ª–æ–≤
    xmp_files = [f for f in os.listdir(data_dir) if f.endswith('.xmp')]
    if not xmp_files:
        print(f"‚ùå XMP —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {data_dir}")
        return False
    
    # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_extensions = ['.jpg', '.jpeg', '.png', '.bmp']
    image_files = []
    for f in os.listdir(data_dir):
        if any(f.lower().endswith(ext) for ext in image_extensions):
            image_files.append(f)
    
    if not image_files:
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {data_dir}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    xmp_ids = {os.path.splitext(f)[0] for f in xmp_files}
    image_ids = {os.path.splitext(f)[0] for f in image_files}
    common_ids = xmp_ids & image_ids
    
    if len(common_ids) < 3:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä XMP-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {len(common_ids)} < 3")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(xmp_files)} XMP —Ñ–∞–π–ª–æ–≤ –∏ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"   –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –ø–∞—Ä: {len(common_ids)}")
    return True


def load_cameras(data_dir: str):
    """–≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –∏–∑ XMP —Ñ–∞–π–ª–æ–≤"""
    print("\nüîß –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä")
    
    parser = SimpleXMPParser(enable_logging=False)
    xmp_cameras = parser.load_all_cameras(data_dir)
    
    if not xmp_cameras:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–º–µ—Ä—ã")
    
    print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–º–µ—Ä: {len(xmp_cameras)}")
    return xmp_cameras


def convert_cameras(xmp_cameras):
    """–≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç"""
    print("üîÑ –≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç")
    
    opencv_cameras = convert_cameras_to_opencv(xmp_cameras, CURRENT_IMAGE_SIZE)
    
    if not opencv_cameras:
        raise ValueError("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–∞–º–µ—Ä")
    
    print(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–º–µ—Ä: {len(opencv_cameras)}")
    return opencv_cameras


def detect_markers(data_dir: str):
    """–≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤"""
    print("üéØ –≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ (ID 1-13)")
    
    detector = SimpleArUcoDetector(enable_logging=False, filter_6x6=True)
    marker_detections = detector.detect_markers_in_directory(data_dir)
    
    if not marker_detections:
        raise ValueError("–ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_detections = sum(len(detections) for detections in marker_detections.values())
    unique_markers = set()
    for detections in marker_detections.values():
        unique_markers.update(detections.keys())
    
    # –ü–æ–¥—Å—á–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
    marker_frequency = {}
    for detections in marker_detections.values():
        for marker_id in detections.keys():
            marker_frequency[marker_id] = marker_frequency.get(marker_id, 0) + 1
    
    triangulatable_markers = sum(1 for freq in marker_frequency.values() if freq >= 3)
    found_markers = sorted(list(unique_markers))
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {found_markers}")
    print(f"   –í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ü–∏–π: {total_detections}")
    print(f"   –ì–æ—Ç–æ–≤—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏: {triangulatable_markers}")
    
    return marker_detections


def triangulate_all_markers(opencv_cameras, marker_detections):
    """–≠—Ç–∞–ø 4: 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤"""
    print("üî∫ –≠—Ç–∞–ø 4: 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"   –ö–∞–º–µ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {len(opencv_cameras)}")
    print(f"   –ö–∞–º–µ—Ä —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏: {len(marker_detections)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    camera_ids_opencv = set(opencv_cameras.keys())
    camera_ids_detections = set(marker_detections.keys())
    common_cameras = camera_ids_opencv & camera_ids_detections
    print(f"   –û–±—â–∏—Ö –∫–∞–º–µ—Ä: {len(common_cameras)}")
    
    if len(common_cameras) == 0:
        raise ValueError("–ù–µ—Ç –æ–±—â–∏—Ö –∫–∞–º–µ—Ä –º–µ–∂–¥—É OpenCV –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏")
    
    triangulated_markers = triangulate_markers(
        opencv_cameras,
        marker_detections,
        min_cameras=0,
        max_reprojection_error=2.0
    )
    
    if not triangulated_markers:
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        print("   üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã:")
        for camera_id in common_cameras:
            detections = marker_detections[camera_id]
            print(f"     –ö–∞–º–µ—Ä–∞ {camera_id}: {len(detections)} –º–∞—Ä–∫–µ—Ä–æ–≤")
            for marker_id in detections.keys():
                print(f"       –ú–∞—Ä–∫–µ—Ä {marker_id}")
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    high_confidence = sum(1 for m in triangulated_markers.values() if m.triangulation_confidence >= 0.7)
    avg_error = sum(m.reprojection_error for m in triangulated_markers.values()) / len(triangulated_markers)
    triangulated_ids = sorted(list(triangulated_markers.keys()))
    
    print(f"   –¢—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {triangulated_ids}")
    print(f"   –í—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {high_confidence}/{len(triangulated_markers)}")
    print(f"   –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {avg_error:.2f} –ø–∏–∫—Å")
    
    return triangulated_markers


def create_blender_files(triangulated_markers, output_dir: str):
    """–≠—Ç–∞–ø 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Blender addon"""
    print("üé® –≠—Ç–∞–ø 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è Blender addon")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    blender_data = prepare_blender_export(triangulated_markers)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è addon
    blender_data['metadata']['created_by'] = 'ArUco Autocalibration Pipeline'
    blender_data['metadata']['format_version'] = '1.0'
    blender_data['metadata']['addon_compatible'] = True
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Blender addon
    blender_file = os.path.join(output_dir, 'blender_aruco_markers.json')
    with open(blender_file, 'w', encoding='utf-8') as f:
        json.dump(blender_data, f, indent=2, ensure_ascii=False)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ addon
    addon_instructions = """
# ArUco Markers Blender Addon - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ addon:

1. **–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª addon:**
   - –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–¥ addon –∫–∞–∫ `aruco_importer.py`
   - –ú–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞

2. **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ Blender:**
   - –û—Ç–∫—Ä–æ–π—Ç–µ Blender
   - Edit ‚Üí Preferences ‚Üí Add-ons
   - Install... ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ `aruco_importer.py`
   - –ü–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ addon

3. **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**
   - –í 3D Viewport –Ω–∞–∂–º–∏—Ç–µ N (–±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å)
   - –ü–æ—è–≤–∏—Ç—Å—è –≤–∫–ª–∞–¥–∫–∞ "ArUco"
   - –ù–∞–∂–º–∏—Ç–µ "Auto Find" –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª blender_aruco_markers.json
   - –ù–∞–∂–º–∏—Ç–µ "Import Markers"

## –ù–∞—Å—Ç—Ä–æ–π–∫–∏ addon:

- **–†–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–æ–≤**: –†–∞–∑–º–µ—Ä Empty –æ–±—ä–µ–∫—Ç–æ–≤
- **–†–∞–∑–º–µ—Ä –ø–æ –∫–∞—á–µ—Å—Ç–≤—É**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
- **–¶–≤–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É**: –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
- **–§–∏–ª—å—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞**: –ò–º–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
- **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏**: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –º–∞—Ä–∫–µ—Ä–æ–≤

## –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞:

- üü¢ **–ó–µ–ª–µ–Ω—ã–π** - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (confidence ‚â• 0.7)
- üü° **–ñ–µ–ª—Ç—ã–π** - —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (confidence 0.5-0.7)  
- üü† **–û—Ä–∞–Ω–∂–µ–≤—ã–π** - –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (confidence < 0.5)

## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

- **Preview Meshes**: –°–æ–∑–¥–∞–Ω–∏–µ mesh –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
- **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä–∫–µ—Ä–∞—Ö**: –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–π—Å—Ç–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
- **–ê–≤—Ç–æ–ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤**: Addon –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö

## –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –º–∞—Ä–∫–µ—Ä–æ–≤:

–ö–∞–∂–¥—ã–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç:
- `aruco_id`: ID –º–∞—Ä–∫–µ—Ä–∞
- `confidence`: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏ (0-1)
- `quality`: –ö–∞—á–µ—Å—Ç–≤–æ ('high', 'medium', 'low')
- `triangulated_position`: 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

---

üí° **–°–æ–≤–µ—Ç**: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ä—ã –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (confidence ‚â• 0.7) –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
"""
    
    instructions_file = os.path.join(output_dir, 'blender_addon_instructions.md')
    with open(instructions_file, 'w', encoding='utf-8') as f:
        f.write(addon_instructions)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    stats = {
        'triangulation_stats': {
            'total_markers': len(triangulated_markers),
            'high_quality': sum(1 for m in triangulated_markers.values() if m.triangulation_confidence >= 0.7),
            'medium_quality': sum(1 for m in triangulated_markers.values() if 0.5 <= m.triangulation_confidence < 0.7),
            'low_quality': sum(1 for m in triangulated_markers.values() if m.triangulation_confidence < 0.5),
            'avg_reprojection_error': sum(m.reprojection_error for m in triangulated_markers.values()) / len(triangulated_markers),
            'marker_details': {
                str(marker_id): {
                    'position': list(result.position_3d),
                    'confidence': result.triangulation_confidence,
                    'error': result.reprojection_error,
                    'cameras': result.camera_ids
                }
                for marker_id, result in triangulated_markers.items()
            }
        }
    }
    
    stats_file = os.path.join(output_dir, 'triangulation_stats.json')
    with open(stats_file, 'w', encoding='utf-8') as f:
        json.dump(stats, f, indent=2, ensure_ascii=False)
    
    print(f"   üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è addon: {blender_file}")
    print(f"   üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {instructions_file}")
    print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_file}")
    
    return blender_file, instructions_file, stats_file


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    DATA_DIR = "data"
    OUTPUT_DIR = "results"
    
    print("üöÄ ArUco –ê–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ - –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω")
    print("=" * 50)
    print("–û—Ç XMP —Ñ–∞–π–ª–æ–≤ –¥–æ Blender addon –∏–º–ø–æ—Ä—Ç–∞")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    
    try:
        start_time = time.time()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not validate_input_data(DATA_DIR):
            return 1
        
        # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–º–µ—Ä
        xmp_cameras = load_cameras(DATA_DIR)
        
        # –≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–∞–º–µ—Ä
        opencv_cameras = convert_cameras(xmp_cameras)
        
        # –≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
        marker_detections = detect_markers(DATA_DIR)
        
        # –≠—Ç–∞–ø 4: –¢—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è
        triangulated_markers = triangulate_all_markers(opencv_cameras, marker_detections)
        
        # –≠—Ç–∞–ø 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è Blender addon
        blender_file, instructions_file, stats_file = create_blender_files(triangulated_markers, OUTPUT_DIR)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        execution_time = time.time() - start_time
        
        print(f"\nüéâ –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f} —Å–µ–∫")
        print(f"üé® –¢—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {len(triangulated_markers)}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        high_quality = sum(1 for m in triangulated_markers.values() if m.triangulation_confidence >= 0.7)
        medium_quality = sum(1 for m in triangulated_markers.values() if 0.5 <= m.triangulation_confidence < 0.7)
        low_quality = sum(1 for m in triangulated_markers.values() if m.triangulation_confidence < 0.5)
        
        print(f"   üü¢ –í—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {high_quality}")
        print(f"   üü° –°—Ä–µ–¥–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {medium_quality}")
        print(f"   üü† –ù–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {low_quality}")
        
        print(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {OUTPUT_DIR}")
        print(f"")
        print(f"üé¨ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Blender addon (—Å–º. {os.path.basename(instructions_file)})")
        print(f"   2. –í Blender: N ‚Üí ArUco ‚Üí Import Markers")
        print(f"   3. –ú–∞—Ä–∫–µ—Ä—ã –ø–æ—è–≤—è—Ç—Å—è –∫–∞–∫ Empty –æ–±—ä–µ–∫—Ç—ã —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
        print(f"")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ä—ã –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        print(f"   –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (‚â•{high_quality} –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ)")
        
        return 0
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return 1


if __name__ == "__main__":
    exit(main())