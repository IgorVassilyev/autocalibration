#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ ArUco –º–∞—Ä–∫–µ—Ä–æ–≤
=============================================================

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è Blender:
1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –∏–∑ XMP —Ñ–∞–π–ª–æ–≤
2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç  
3. –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ (DICT_4X4_1000, ID 1-13)
4. 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
5. –°–æ–∑–¥–∞–Ω–∏–µ Blender-—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–∞–º–µ—Ä –∏ –º–∞—Ä–∫–µ—Ä–æ–≤

–í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Ñ–∞–π–ª –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç Blender-–∏–º–ø–æ—Ä—Ç—ã (bpy, mathutils)!
       Blender-—Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py
"""

import os
import sys
import json
import time

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from xmp_parser import SimpleXMPParser
    from xmp_to_opencv import convert_cameras_to_opencv
    from aruco_detector import SimpleArUcoDetector
    from triangulation import triangulate_markers, prepare_blender_export
    from config import CURRENT_IMAGE_SIZE
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    print("  - xmp_parser.py, xmp_to_opencv.py, aruco_detector.py")
    print("  - triangulation.py, config.py")
    sys.exit(1)


def validate_input_data(data_dir: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not os.path.exists(data_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {data_dir}")
        return False
    
    # –ü–æ–∏—Å–∫ XMP —Ñ–∞–π–ª–æ–≤
    xmp_files = [f for f in os.listdir(data_dir) if f.endswith('.xmp')]
    if not xmp_files:
        print(f"‚ùå XMP —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {data_dir}")
        return False
    
    # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_extensions = ['.jpg', '.jpeg', '.png', '.bmp']
    image_files = []
    for f in os.listdir(data_dir):
        if any(f.lower().endswith(ext) for ext in image_extensions):
            image_files.append(f)
    
    if not image_files:
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {data_dir}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    xmp_ids = {os.path.splitext(f)[0] for f in xmp_files}
    image_ids = {os.path.splitext(f)[0] for f in image_files}
    common_ids = xmp_ids & image_ids
    
    if len(common_ids) < 3:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä XMP-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {len(common_ids)} < 3")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(xmp_files)} XMP —Ñ–∞–π–ª–æ–≤ –∏ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"   –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –ø–∞—Ä: {len(common_ids)}")
    return True


def load_cameras(data_dir: str):
    """–≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –∏–∑ XMP —Ñ–∞–π–ª–æ–≤"""
    print("\nüîß –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä")
    
    parser = SimpleXMPParser(enable_logging=False)
    xmp_cameras = parser.load_all_cameras(data_dir)
    
    if not xmp_cameras:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–º–µ—Ä—ã")
    
    print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–º–µ—Ä: {len(xmp_cameras)}")
    return xmp_cameras


def convert_cameras(xmp_cameras):
    """–≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç"""
    print("üîÑ –≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç")
    
    opencv_cameras = convert_cameras_to_opencv(xmp_cameras, CURRENT_IMAGE_SIZE)
    
    if not opencv_cameras:
        raise ValueError("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–∞–º–µ—Ä")
    
    print(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–º–µ—Ä: {len(opencv_cameras)}")
    return opencv_cameras


def detect_markers(data_dir: str):
    """–≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤"""
    print("üéØ –≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ (ID 1-13)")
    
    detector = SimpleArUcoDetector(enable_logging=False, filter_6x6=True)
    marker_detections = detector.detect_markers_in_directory(data_dir)
    
    if not marker_detections:
        raise ValueError("–ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_detections = sum(len(detections) for detections in marker_detections.values())
    unique_markers = set()
    for detections in marker_detections.values():
        unique_markers.update(detections.keys())
    
    # –ü–æ–¥—Å—á–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
    marker_frequency = {}
    for detections in marker_detections.values():
        for marker_id in detections.keys():
            marker_frequency[marker_id] = marker_frequency.get(marker_id, 0) + 1
    
    triangulatable_markers = sum(1 for freq in marker_frequency.values() if freq >= 3)
    found_markers = sorted(list(unique_markers))
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {found_markers}")
    print(f"   –í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ü–∏–π: {total_detections}")
    print(f"   –ì–æ—Ç–æ–≤—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏: {triangulatable_markers}")
    
    return marker_detections


def triangulate_all_markers(opencv_cameras, marker_detections):
    """–≠—Ç–∞–ø 4: 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤"""
    print("üî∫ –≠—Ç–∞–ø 4: 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"   –ö–∞–º–µ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {len(opencv_cameras)}")
    print(f"   –ö–∞–º–µ—Ä —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏: {len(marker_detections)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    camera_ids_opencv = set(opencv_cameras.keys())
    camera_ids_detections = set(marker_detections.keys())
    common_cameras = camera_ids_opencv & camera_ids_detections
    print(f"   –û–±—â–∏—Ö –∫–∞–º–µ—Ä: {len(common_cameras)}")
    
    if len(common_cameras) == 0:
        raise ValueError("–ù–µ—Ç –æ–±—â–∏—Ö –∫–∞–º–µ—Ä –º–µ–∂–¥—É OpenCV –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏")
    
    triangulated_markers = triangulate_markers(
        opencv_cameras,
        marker_detections,
        min_cameras=3,
        max_reprojection_error=200.0
    )
    
    if not triangulated_markers:
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        print("   üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã:")
        for camera_id in common_cameras:
            detections = marker_detections[camera_id]
            print(f"     –ö–∞–º–µ—Ä–∞ {camera_id}: {len(detections)} –º–∞—Ä–∫–µ—Ä–æ–≤")
            for marker_id in detections.keys():
                print(f"       –ú–∞—Ä–∫–µ—Ä {marker_id}")
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    high_confidence = sum(1 for m in triangulated_markers.values() if m.triangulation_confidence >= 0.7)
    avg_error = sum(m.reprojection_error for m in triangulated_markers.values()) / len(triangulated_markers)
    triangulated_ids = sorted(list(triangulated_markers.keys()))
    
    print(f"   –¢—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {triangulated_ids}")
    print(f"   –í—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {high_confidence}/{len(triangulated_markers)}")
    print(f"   –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {avg_error:.2f} –ø–∏–∫—Å")
    
    return triangulated_markers


def create_blender_files(triangulated_markers, output_dir: str, data_dir: str):
    """–≠—Ç–∞–ø 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Blender"""
    print("üé® –≠—Ç–∞–ø 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è Blender")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
    blender_data = prepare_blender_export(triangulated_markers)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    blender_data['metadata']['created_by'] = 'ArUco Autocalibration Pipeline'
    blender_data['metadata']['format_version'] = '1.0'
    blender_data['metadata']['blender_script_compatible'] = True
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
    blender_file = os.path.join(output_dir, 'blender_aruco_markers.json')
    with open(blender_file, 'w', encoding='utf-8') as f:
        json.dump(blender_data, f, indent=2, ensure_ascii=False)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ Blender —Å–∫—Ä–∏–ø—Ç–∞
    blender_script = create_unified_blender_script(output_dir, data_dir, blender_file)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    stats = {
        'triangulation_stats': {
            'total_markers': len(triangulated_markers),
            'high_quality': sum(1 for m in triangulated_markers.values() if m.triangulation_confidence >= 0.7),
            'medium_quality': sum(1 for m in triangulated_markers.values() if 0.5 <= m.triangulation_confidence < 0.7),
            'low_quality': sum(1 for m in triangulated_markers.values() if m.triangulation_confidence < 0.5),
            'avg_reprojection_error': sum(m.reprojection_error for m in triangulated_markers.values()) / len(triangulated_markers),
            'marker_details': {
                str(marker_id): {
                    'position': list(result.position_3d),
                    'confidence': result.triangulation_confidence,
                    'error': result.reprojection_error,
                    'cameras': result.camera_ids
                }
                for marker_id, result in triangulated_markers.items()
            }
        }
    }
    
    stats_file = os.path.join(output_dir, 'triangulation_stats.json')
    with open(stats_file, 'w', encoding='utf-8') as f:
        json.dump(stats, f, indent=2, ensure_ascii=False)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    instructions = f"""# ArUco + –ö–∞–º–µ—Ä—ã - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–º–ø–æ—Ä—Ç—É –≤ Blender

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:

1. **–û—Ç–∫—Ä–æ–π—Ç–µ Blender**
2. **–û—Ç–∫—Ä–æ–π—Ç–µ Scripting workspace** (–≤–≤–µ—Ä—Ö—É Blender)
3. **–û—Ç–∫—Ä–æ–π—Ç–µ —Å–∫—Ä–∏–ø—Ç:** Text ‚Üí Open ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ `{os.path.basename(blender_script)}`
4. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—É—Ç–∏ –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞:**
   ```python
   FOLDER = r"{os.path.abspath(data_dir)}"
   MARKERS_FILE = r"{os.path.abspath(blender_file)}"
   ```
5. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ:** Text ‚Üí Run Script (–∏–ª–∏ Alt+P)

## –ß—Ç–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:

### üé• –ö–∞–º–µ—Ä—ã (RealityCapture_Cameras):
- –ü–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ XMP —Ñ–∞–π–ª–æ–≤
- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ñ–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –≥–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞)
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞

### üè∑Ô∏è ArUco –ú–∞—Ä–∫–µ—Ä—ã (ArUco_Markers):
- 3D –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
- –¶–≤–µ—Ç–æ–≤–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É:
  - üü¢ **–ó–µ–ª–µ–Ω—ã–µ** - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (confidence ‚â• 0.7)
  - üü° **–ñ–µ–ª—Ç—ã–µ** - —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (confidence 0.5-0.7)  
  - üü† **–û—Ä–∞–Ω–∂–µ–≤—ã–µ** - –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (confidence < 0.5)

## –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º:

- **–ù–µ –Ω–∞–π–¥–µ–Ω—ã XMP —Ñ–∞–π–ª—ã:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å FOLDER
- **–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–∞—Ä–∫–µ—Ä–æ–≤:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å MARKERS_FILE  
- **–ü—É—Å—Ç–∞—è —Å—Ü–µ–Ω–∞:** –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—É—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
- **–û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏:** –°–º–æ—Ç—Ä–∏—Ç–µ System Console (Window ‚Üí Toggle System Console)

---

üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ä—ã –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–∑–µ–ª–µ–Ω—ã–µ) –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

üìç **–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:** –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç RealityCapture.
"""
    
    instructions_file = os.path.join(output_dir, 'blender_import_instructions.txt')
    with open(instructions_file, 'w', encoding='utf-8') as f:
        f.write(instructions)
    
    print(f"   üíæ –î–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä–æ–≤: {blender_file}")
    print(f"   üìú Blender —Å–∫—Ä–∏–ø—Ç: {blender_script}")
    print(f"   üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {instructions_file}")
    print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats_file}")
    
    return blender_file, blender_script, instructions_file, stats_file


def create_unified_blender_script(output_dir: str, data_dir: str, markers_file: str) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ Blender —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞"""
    
    script_content = f'''#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π –∏–º–ø–æ—Ä—Ç–µ—Ä –∫–∞–º–µ—Ä –∏ ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è Blender
================================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –¢–û–õ–¨–ö–û –≤–Ω—É—Ç—Ä–∏ Blender!

–ù–ê–°–¢–†–û–ô–¢–ï –ü–£–¢–ò –ù–ò–ñ–ï –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú!
"""

import os
import json
import xml.etree.ElementTree as ET

# Blender-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (—Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ Blender!)
from mathutils import Matrix, Vector
import bpy
import traceback

# ---- –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –ü–£–¢–ò! ----
FOLDER = r"{os.path.abspath(data_dir)}"  # –ü–∞–ø–∫–∞ —Å XMP —Ñ–∞–π–ª–∞–º–∏
MARKERS_FILE = r"{os.path.abspath(markers_file)}"  # –§–∞–π–ª —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
# -----------------------------

RC_NS = {{"rdf":"http://www.w3.org/1999/02/22-rdf-syntax-ns#", "xcr":"http://www.capturingreality.com/ns/xcr/1.1#"}}

def _floats(s):
    return [float(x) for x in str(s).strip().split()] if s is not None else []

def parse_rc_xmp(path):
    tree = ET.parse(path)
    root = tree.getroot()
    desc = root.find(".//rdf:Description", RC_NS)
    if desc is None:
        return None
    pos = _floats(desc.findtext("xcr:Position", default="", namespaces=RC_NS))
    rot = _floats(desc.findtext("xcr:Rotation", default="", namespaces=RC_NS))
    dist = _floats(desc.findtext("xcr:DistortionCoeficients", default="", namespaces=RC_NS))
    attrs = {{k.split('}}')[1]: v for k, v in desc.attrib.items() if k.startswith('{{'+RC_NS['xcr']+'}}')}}
    return {{"path": path, "name": os.path.splitext(os.path.basename(path))[0],
            "position": pos, "rotation": rot, "dist": dist, "attrs": attrs}}

def to_blender_cam_matrix(R_w2cv_3x3, C_world_vec3):
    R_bcam2cv = Matrix(((1,0,0),(0,-1,0),(0,0,-1)))
    R_cv2bcam = R_bcam2cv.transposed()
    R_w2bcam = R_cv2bcam @ R_w2cv_3x3
    R_bcam2w = R_w2bcam.transposed()
    M = R_bcam2w.to_4x4()
    M.translation = Vector(C_world_vec3)
    return M

def ensure_collection(name):
    coll = bpy.data.collections.get(name)
    if not coll:
        coll = bpy.data.collections.new(name)
        bpy.context.scene.collection.children.link(coll)
    return coll

def create_camera(cam_data, collection):
    name = cam_data["name"]
    pos = cam_data["position"]
    rot = cam_data["rotation"]
    attrs = cam_data["attrs"]
    
    if len(pos) != 3 or len(rot) != 9:
        print(f"[WARN] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {{name}}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∑–∏—Ü–∏–∏/–ø–æ–≤–æ—Ä–æ—Ç–∞")
        return None
    
    C_world = Vector(pos)
    R_w2cv = Matrix((rot[0:3], rot[3:6], rot[6:9]))
    
    cam_data_block = bpy.data.cameras.new(name=name+"_DATA")
    cam_obj = bpy.data.objects.new(name=name, object_data=cam_data_block)
    collection.objects.link(cam_obj)
    
    cam_obj.matrix_world = to_blender_cam_matrix(R_w2cv, C_world)
    
    f35 = float(attrs.get("FocalLength35mm", 0.0) or 0.0)
    if f35 > 0:
        cam_data_block.sensor_fit = 'HORIZONTAL'
        cam_data_block.sensor_width = 36.0
        cam_data_block.lens = f35
    
    try:
        ppu = float(attrs.get("PrincipalPointU", ""))
        ppv = float(attrs.get("PrincipalPointV", ""))
        if abs(ppu) < 0.05 and abs(ppv) < 0.05:
            cam_data_block.shift_x = ppu
            cam_data_block.shift_y = -ppv
        else:
            cam_data_block.shift_x = (ppu - 0.5)
            cam_data_block.shift_y = -(ppv - 0.5)
    except Exception:
        pass
    
    cam_obj["RC_attrs"] = attrs
    cam_obj["RC_distortion"] = cam_data["dist"]
    return cam_obj

def create_marker(marker_id, marker_data, collection):
    name = f"ArUco_Marker_{{marker_id:02d}}"
    position = marker_data['position']
    confidence = marker_data['confidence']
    quality = marker_data.get('quality', 'unknown')
    
    bpy.ops.object.empty_add(type='PLAIN_AXES', location=tuple(position))
    marker_obj = bpy.context.active_object
    marker_obj.name = name
    
    # –†–∞–∑–º–µ—Ä –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    if quality == 'high':
        size = 0.1
    elif quality == 'medium':
        size = 0.08
    else:
        size = 0.06
    marker_obj.empty_display_size = size
    
    # –¶–≤–µ—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    if quality == 'high':
        marker_obj.color = (0.0, 1.0, 0.0, 1.0)  # –ó–µ–ª–µ–Ω—ã–π
    elif quality == 'medium':
        marker_obj.color = (1.0, 1.0, 0.0, 1.0)  # –ñ–µ–ª—Ç—ã–π
    else:
        marker_obj.color = (1.0, 0.5, 0.0, 1.0)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
    
    # –°–≤–æ–π—Å—Ç–≤–∞
    marker_obj["aruco_id"] = marker_id
    marker_obj["confidence"] = confidence
    marker_obj["quality"] = quality
    marker_obj["triangulated_position"] = position
    
    # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
    collection.objects.link(marker_obj)
    if marker_obj.name in bpy.context.scene.collection.objects:
        bpy.context.scene.collection.objects.unlink(marker_obj)
    
    return marker_obj

def import_cameras(folder):
    print("üé• –ò–º–ø–æ—Ä—Ç –∫–∞–º–µ—Ä...")
    if not folder or not os.path.isdir(folder):
        print(f"[ERROR] –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {{folder}}")
        return []
    
    xmp_paths = [os.path.join(folder, f) for f in os.listdir(folder) if f.lower().endswith(".xmp")]
    if not xmp_paths:
        print(f"[ERROR] XMP —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤: {{folder}}")
        return []
    
    coll = ensure_collection("RealityCapture_Cameras")
    imported = []
    
    for p in sorted(xmp_paths):
        try:
            data = parse_rc_xmp(p)
            if data:
                cam = create_camera(data, coll)
                if cam:
                    imported.append(cam.name)
        except Exception as e:
            print(f"[ERROR] {{p}}: {{e}}")
    
    print(f"   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–º–µ—Ä: {{len(imported)}}")
    return imported

def import_markers(markers_file):
    print("üè∑Ô∏è –ò–º–ø–æ—Ä—Ç –º–∞—Ä–∫–µ—Ä–æ–≤...")
    if not markers_file or not os.path.exists(markers_file):
        print(f"[ERROR] –§–∞–π–ª –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {{markers_file}}")
        return []
    
    try:
        with open(markers_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {{e}}")
        return []
    
    markers_data = data.get('markers', {{}})
    if not markers_data:
        print("[ERROR] –î–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return []
    
    coll = ensure_collection("ArUco_Markers")
    imported = []
    high_quality = 0
    
    for marker_name, marker_info in markers_data.items():
        try:
            marker_id = marker_info['id']
            quality = marker_info.get('quality', 'unknown')
            marker_obj = create_marker(marker_id, marker_info, coll)
            imported.append(marker_obj.name)
            if quality == 'high':
                high_quality += 1
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ {{marker_name}}: {{e}}")
    
    print(f"   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {{len(imported)}} (–≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {{high_quality}})")
    return imported

def clear_existing():
    print("üßπ –û—á–∏—Å—Ç–∫–∞...")
    # –£–¥–∞–ª—è–µ–º –∫–∞–º–µ—Ä—ã –∏ –º–∞—Ä–∫–µ—Ä—ã
    objects_to_remove = []
    for obj in bpy.data.objects:
        if obj.type == 'CAMERA' or obj.name.startswith('ArUco_Marker_'):
            objects_to_remove.append(obj)
    
    for obj in objects_to_remove:
        bpy.data.objects.remove(obj, do_unlink=True)
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    for coll_name in ['RealityCapture_Cameras', 'ArUco_Markers']:
        if coll_name in bpy.data.collections:
            bpy.data.collections.remove(bpy.data.collections[coll_name])

def main():
    print("="*50)
    print("üöÄ –ï–î–ò–ù–´–ô –ò–ú–ü–û–†–¢–ï–† –ö–ê–ú–ï–† –ò –ú–ê–†–ö–ï–†–û–í")
    print("="*50)
    print(f"üìÇ XMP –ø–∞–ø–∫–∞: {{FOLDER}}")
    print(f"üè∑Ô∏è –§–∞–π–ª –º–∞—Ä–∫–µ—Ä–æ–≤: {{MARKERS_FILE}}")
    print("="*50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω—ã
    bpy.context.scene.unit_settings.system = 'METRIC'
    bpy.context.scene.unit_settings.scale_length = 1.0
    bpy.ops.object.select_all(action='DESELECT')
    
    try:
        clear_existing()
        cameras = import_cameras(FOLDER)
        markers = import_markers(MARKERS_FILE)
        
        print(f"\\n‚úÖ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print(f"   üé• –ö–∞–º–µ—Ä: {{len(cameras)}}")
        print(f"   üè∑Ô∏è –ú–∞—Ä–∫–µ—Ä–æ–≤: {{len(markers)}}")
        
        if cameras or markers:
            print("\\nüìã –ö–û–õ–õ–ï–ö–¶–ò–ò:")
            if cameras:
                print("   ‚Ä¢ RealityCapture_Cameras - –∫–∞–º–µ—Ä—ã –∏–∑ XMP")
            if markers:
                print("   ‚Ä¢ ArUco_Markers - –º–∞—Ä–∫–µ—Ä—ã (üü¢–≤—ã—Å–æ–∫–æ–µ üü°—Å—Ä–µ–¥–Ω–µ–µ üü†–Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)")
        else:
            print("\\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º!")
            
    except Exception as e:
        print(f"\\nüí• –û–®–ò–ë–ö–ê: {{e}}")
        traceback.print_exc()

if __name__ == "__main__":
    main()
'''
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
    script_path = os.path.join(output_dir, 'blender_import_cameras_and_markers.py')
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    return script_path


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    DATA_DIR = "data"
    OUTPUT_DIR = "results"
    
    print("üöÄ ArUco –ê–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ - –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω")
    print("=" * 50)
    print("–û—Ç XMP —Ñ–∞–π–ª–æ–≤ –¥–æ –µ–¥–∏–Ω–æ–≥–æ Blender –∏–º–ø–æ—Ä—Ç–∞")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    
    try:
        start_time = time.time()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not validate_input_data(DATA_DIR):
            return 1
        
        # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–º–µ—Ä
        xmp_cameras = load_cameras(DATA_DIR)
        
        # –≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–∞–º–µ—Ä
        opencv_cameras = convert_cameras(xmp_cameras)
        
        # –≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
        marker_detections = detect_markers(DATA_DIR)
        
        # –≠—Ç–∞–ø 4: –¢—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è
        triangulated_markers = triangulate_all_markers(opencv_cameras, marker_detections)
        
        # –≠—Ç–∞–ø 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è Blender
        blender_file, blender_script, instructions_file, stats_file = create_blender_files(
            triangulated_markers, OUTPUT_DIR, DATA_DIR
        )
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        execution_time = time.time() - start_time
        
        print(f"\nüéâ –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f} —Å–µ–∫")
        print(f"üé® –¢—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {len(triangulated_markers)}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        high_quality = sum(1 for m in triangulated_markers.values() if m.triangulation_confidence >= 0.7)
        medium_quality = sum(1 for m in triangulated_markers.values() if 0.5 <= m.triangulation_confidence < 0.7)
        low_quality = sum(1 for m in triangulated_markers.values() if m.triangulation_confidence < 0.5)
        
        print(f"   üü¢ –í—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {high_quality}")
        print(f"   üü° –°—Ä–µ–¥–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {medium_quality}")
        print(f"   üü† –ù–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {low_quality}")
        
        print(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {OUTPUT_DIR}")
        print(f"")
        print(f"üé¨ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"   1. –û—Ç–∫—Ä–æ–π—Ç–µ Blender")
        print(f"   2. –û—Ç–∫—Ä–æ–π—Ç–µ Scripting workspace")
        print(f"   3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: {os.path.basename(blender_script)}")
        print(f"   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞")
        print(f"   5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç (Alt+P)")
        print(f"")
        print(f"üìã –ß—Ç–æ –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
        print(f"   ‚Ä¢ RealityCapture_Cameras - {len(xmp_cameras)} –∫–∞–º–µ—Ä –∏–∑ XMP")
        print(f"   ‚Ä¢ ArUco_Markers - {len(triangulated_markers)} —Ç—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤")
        print(f"")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {high_quality} –º–∞—Ä–∫–µ—Ä–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        return 0
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return 1


if __name__ == "__main__":
    exit(main())