#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ ArUco –º–∞—Ä–∫–µ—Ä–æ–≤
=============================================================

–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ—Ç XMP —Ñ–∞–π–ª–æ–≤ –¥–æ 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è Blender:
1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –∏–∑ XMP —Ñ–∞–π–ª–æ–≤
2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
3. –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ (DICT_4X4_1000, ID 1-13)
4. 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Blender

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py
"""

import os
import sys
import json
import time

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from xmp_parser import SimpleXMPParser
    from xmp_to_opencv import convert_cameras_to_opencv
    from aruco_detector import SimpleArUcoDetector
    from triangulation import triangulate_markers, prepare_blender_export
    from config import CURRENT_IMAGE_SIZE
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    print("  - xmp_parser.py, xmp_to_opencv.py, aruco_detector.py")
    print("  - triangulation.py, config.py")
    sys.exit(1)


def validate_input_data(data_dir: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not os.path.exists(data_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {data_dir}")
        return False
    
    # –ü–æ–∏—Å–∫ XMP —Ñ–∞–π–ª–æ–≤
    xmp_files = [f for f in os.listdir(data_dir) if f.endswith('.xmp')]
    if not xmp_files:
        print(f"‚ùå XMP —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {data_dir}")
        return False
    
    # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_extensions = ['.jpg', '.jpeg', '.png', '.bmp']
    image_files = []
    for f in os.listdir(data_dir):
        if any(f.lower().endswith(ext) for ext in image_extensions):
            image_files.append(f)
    
    if not image_files:
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {data_dir}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    xmp_ids = {os.path.splitext(f)[0] for f in xmp_files}
    image_ids = {os.path.splitext(f)[0] for f in image_files}
    common_ids = xmp_ids & image_ids
    
    if len(common_ids) < 3:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä XMP-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {len(common_ids)} < 3")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(xmp_files)} XMP —Ñ–∞–π–ª–æ–≤ –∏ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"   –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –ø–∞—Ä: {len(common_ids)}")
    return True


def load_cameras(data_dir: str):
    """–≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –∏–∑ XMP —Ñ–∞–π–ª–æ–≤"""
    print("\nüîß –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä")
    
    parser = SimpleXMPParser(enable_logging=False)
    xmp_cameras = parser.load_all_cameras(data_dir)
    
    if not xmp_cameras:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–º–µ—Ä—ã")
    
    print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–º–µ—Ä: {len(xmp_cameras)}")
    return xmp_cameras


def convert_cameras(xmp_cameras):
    """–≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç"""
    print("üîÑ –≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç")
    
    opencv_cameras = convert_cameras_to_opencv(xmp_cameras, CURRENT_IMAGE_SIZE)
    
    if not opencv_cameras:
        raise ValueError("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–∞–º–µ—Ä")
    
    print(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–º–µ—Ä: {len(opencv_cameras)}")
    return opencv_cameras


def detect_markers(data_dir: str):
    """–≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤"""
    print("üéØ –≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ (ID 1-13)")
    
    detector = SimpleArUcoDetector(enable_logging=False, filter_6x6=True)
    marker_detections = detector.detect_markers_in_directory(data_dir)
    
    if not marker_detections:
        raise ValueError("–ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_detections = sum(len(detections) for detections in marker_detections.values())
    unique_markers = set()
    for detections in marker_detections.values():
        unique_markers.update(detections.keys())
    
    # –ü–æ–¥—Å—á–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
    marker_frequency = {}
    for detections in marker_detections.values():
        for marker_id in detections.keys():
            marker_frequency[marker_id] = marker_frequency.get(marker_id, 0) + 1
    
    triangulatable_markers = sum(1 for freq in marker_frequency.values() if freq >= 3)
    found_markers = sorted(list(unique_markers))
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {found_markers}")
    print(f"   –í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ü–∏–π: {total_detections}")
    print(f"   –ì–æ—Ç–æ–≤—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏: {triangulatable_markers}")
    
    return marker_detections


def triangulate_all_markers(opencv_cameras, marker_detections):
    """–≠—Ç–∞–ø 4: 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤"""
    print("üî∫ –≠—Ç–∞–ø 4: 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"   –ö–∞–º–µ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {len(opencv_cameras)}")
    print(f"   –ö–∞–º–µ—Ä —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏: {len(marker_detections)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    camera_ids_opencv = set(opencv_cameras.keys())
    camera_ids_detections = set(marker_detections.keys())
    common_cameras = camera_ids_opencv & camera_ids_detections
    print(f"   –û–±—â–∏—Ö –∫–∞–º–µ—Ä: {len(common_cameras)}")
    
    if len(common_cameras) == 0:
        raise ValueError("–ù–µ—Ç –æ–±—â–∏—Ö –∫–∞–º–µ—Ä –º–µ–∂–¥—É OpenCV –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏")
    
    triangulated_markers = triangulate_markers(
        opencv_cameras,
        marker_detections,
        min_cameras=3,
        max_reprojection_error=2.0
    )
    
    if not triangulated_markers:
        # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        print("   üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã:")
        for camera_id in common_cameras:
            detections = marker_detections[camera_id]
            print(f"     –ö–∞–º–µ—Ä–∞ {camera_id}: {len(detections)} –º–∞—Ä–∫–µ—Ä–æ–≤")
            for marker_id in detections.keys():
                print(f"       –ú–∞—Ä–∫–µ—Ä {marker_id}")
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    high_confidence = sum(1 for m in triangulated_markers.values() if m.triangulation_confidence >= 0.7)
    avg_error = sum(m.reprojection_error for m in triangulated_markers.values()) / len(triangulated_markers)
    triangulated_ids = sorted(list(triangulated_markers.keys()))
    
    print(f"   –¢—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {triangulated_ids}")
    print(f"   –í—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {high_confidence}/{len(triangulated_markers)}")
    print(f"   –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {avg_error:.2f} –ø–∏–∫—Å")
    
    return triangulated_markers


def create_blender_files(triangulated_markers, output_dir: str):
    """–≠—Ç–∞–ø 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Blender"""
    print("üé® –≠—Ç–∞–ø 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è Blender")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    blender_data = prepare_blender_export(triangulated_markers)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Blender
    blender_file = os.path.join(output_dir, 'blender_aruco_markers.json')
    with open(blender_file, 'w', encoding='utf-8') as f:
        json.dump(blender_data, f, indent=2, ensure_ascii=False)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è Blender
    blender_script = f'''import bpy
import json
import os

def import_aruco_markers():
    """–ò–º–ø–æ—Ä—Ç ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ Blender –∫–∞–∫ Empty –æ–±—ä–µ–∫—Ç—ã"""
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–û–ò–°–ö –§–ê–ô–õ–ê
    # –ò—â–µ–º —Ñ–∞–π–ª –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö
    possible_paths = [
        # 1. –í —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
        os.path.join(os.path.dirname(__file__), "blender_aruco_markers.json") if __name__ != "__main__" else None,
        
        # 2. –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ blend —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω)
        os.path.join(os.path.dirname(bpy.data.filepath), "blender_aruco_markers.json") if bpy.data.filepath else None,
        
        # 3. –í —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.path.join(os.getcwd(), "blender_aruco_markers.json"),
        
        # 4. –í –ø–∞–ø–∫–µ results –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.path.join(os.getcwd(), "results", "blender_aruco_markers.json"),
        
        # 5. –ù–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—É–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª)
        os.path.join(os.path.expanduser("~"), "Desktop", "blender_aruco_markers.json"),
        
        # 6. –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
        r"C:\\Users\\admin\\PycharmProjects\\autocalibration\\results\\blender_aruco_markers.json"
    ]
    
    # –ò—â–µ–º —Ñ–∞–π–ª
    data_file = None
    for path in possible_paths:
        if path and os.path.exists(path):
            data_file = path
            break
    
    if not data_file:
        print("‚ùå –§–∞–π–ª blender_aruco_markers.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üîç –ò—Å–∫–∞–ª–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Å—Ç–∞—Ö:")
        for path in possible_paths:
            if path:
                print(f"   - {{path}}")
        print("\\nüí° –†–µ—à–µ–Ω–∏–µ:")
        print("   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ blender_aruco_markers.json –≤ –ø–∞–ø–∫—É —Å .blend —Ñ–∞–π–ª–æ–º")
        print("   2. –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ –ø–∞–ø–∫—É Blender")
        print("   3. –ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ 21 —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {{data_file}}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        with open(data_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {{e}}")
        return
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ArUco –º–∞—Ä–∫–µ—Ä–æ–≤
    bpy.ops.object.select_all(action='DESELECT')
    for obj in bpy.data.objects:
        if obj.name.startswith('ArUco_Marker_'):
            obj.select_set(True)
    bpy.ops.object.delete()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
    collection_name = "ArUco_Markers"
    if collection_name in bpy.data.collections:
        bpy.data.collections.remove(bpy.data.collections[collection_name])
    
    collection = bpy.data.collections.new(collection_name)
    bpy.context.scene.collection.children.link(collection)
    
    # –ò–º–ø–æ—Ä—Ç –º–∞—Ä–∫–µ—Ä–æ–≤
    markers_data = data['markers']
    total_markers = len(markers_data)
    high_quality_count = 0
    
    print(f"üéØ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º {{total_markers}} ArUco –º–∞—Ä–∫–µ—Ä–æ–≤...")
    
    for marker_name, marker_info in markers_data.items():
        marker_id = marker_info['id']
        position = marker_info['position']
        confidence = marker_info['confidence']
        quality = marker_info['quality']
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Empty –æ–±—ä–µ–∫—Ç–∞
        bpy.ops.object.empty_add(
            type='PLAIN_AXES',
            location=(position[0], position[1], position[2])
        )
        
        empty_obj = bpy.context.active_object
        empty_obj.name = f"ArUco_Marker_{{marker_id:02d}}"
        
        # –†–∞–∑–º–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
        if quality == 'high':
            empty_obj.empty_display_size = 0.1
            high_quality_count += 1
        elif quality == 'medium':
            empty_obj.empty_display_size = 0.08
        else:
            empty_obj.empty_display_size = 0.06
        
        # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
        if quality == 'high':
            empty_obj.color = (0.0, 1.0, 0.0, 1.0)  # –ó–µ–ª–µ–Ω—ã–π
        elif quality == 'medium':
            empty_obj.color = (1.0, 1.0, 0.0, 1.0)  # –ñ–µ–ª—Ç—ã–π
        else:
            empty_obj.color = (1.0, 0.5, 0.0, 1.0)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
        empty_obj["aruco_id"] = marker_id
        empty_obj["confidence"] = confidence
        empty_obj["quality"] = quality
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        # –£–±–∏—Ä–∞–µ–º –∏–∑ Scene Collection —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Ç–∞–º –µ—Å—Ç—å
        if empty_obj.name in bpy.context.scene.collection.objects:
            bpy.context.scene.collection.objects.unlink(empty_obj)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é
        collection.objects.link(empty_obj)
    
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"   üìä –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {{total_markers}}")
    print(f"   ‚≠ê –í—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {{high_quality_count}}")
    print(f"   üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {{collection_name}}")
    print(f"")
    print(f"üé® –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞:")
    print(f"   üü¢ –ó–µ–ª–µ–Ω—ã–π - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (confidence ‚â• 0.7)")
    print(f"   üü° –ñ–µ–ª—Ç—ã–π - —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (confidence 0.5-0.7)")
    print(f"   üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π - –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (confidence < 0.5)")
    print(f"")
    print(f"üí° –°–æ–≤–µ—Ç: –ú–∞—Ä–∫–µ—Ä—ã –∏–º–µ—é—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏")

# –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
if __name__ == "__main__":
    import_aruco_markers()
'''
    
    script_file = os.path.join(output_dir, 'import_aruco_markers.py')
    with open(script_file, 'w', encoding='utf-8') as f:
        f.write(blender_script)
    
    print(f"   üíæ –î–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä–æ–≤: {blender_file}")
    print(f"   üíæ –°–∫—Ä–∏–ø—Ç Blender: {script_file}")
    
    return blender_file, script_file


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    DATA_DIR = "data"
    OUTPUT_DIR = "results"
    
    print("üöÄ ArUco –ê–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ - –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω")
    print("=" * 50)
    print("–û—Ç XMP —Ñ–∞–π–ª–æ–≤ –¥–æ 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ Blender")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    
    try:
        start_time = time.time()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not validate_input_data(DATA_DIR):
            return 1
        
        # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–º–µ—Ä
        xmp_cameras = load_cameras(DATA_DIR)
        
        # –≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–∞–º–µ—Ä
        opencv_cameras = convert_cameras(xmp_cameras)
        
        # –≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
        marker_detections = detect_markers(DATA_DIR)
        
        # –≠—Ç–∞–ø 4: –¢—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è
        triangulated_markers = triangulate_all_markers(opencv_cameras, marker_detections)
        
        # –≠—Ç–∞–ø 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è Blender
        blender_file, script_file = create_blender_files(triangulated_markers, OUTPUT_DIR)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        execution_time = time.time() - start_time
        
        print(f"\nüéâ –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f} —Å–µ–∫")
        print(f"üé® –¢—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {len(triangulated_markers)}")
        print(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {OUTPUT_DIR}")
        print(f"")
        print(f"üé¨ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - Blender:")
        print(f"   1. –û—Ç–∫—Ä–æ–π—Ç–µ Blender")
        print(f"   2. Scripting ‚Üí Open ‚Üí {script_file}")
        print(f"   3. Run Script")
        print(f"   4. –ú–∞—Ä–∫–µ—Ä—ã –ø–æ—è–≤—è—Ç—Å—è –∫–∞–∫ Empty –æ–±—ä–µ–∫—Ç—ã")
        
        return 0
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return 1


if __name__ == "__main__":
    exit(main())