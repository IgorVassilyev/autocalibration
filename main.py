#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ ArUco –º–∞—Ä–∫–µ—Ä–æ–≤
=============================================================

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç aruco_marker.json:
1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –∏–∑ XMP —Ñ–∞–π–ª–æ–≤
2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç  
3. –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ (DICT_4X4_1000, ID 1-13)
4. 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
5. –°–æ–∑–¥–∞–Ω–∏–µ aruco_marker.json –¥–ª—è Blender

–†–ï–ó–£–õ–¨–¢–ê–¢: –§–∞–π–ª aruco_marker.json —Å —Ç—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py
"""

import os
import sys
import json
import time

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from xmp_parser import SimpleXMPParser
    from xmp_to_opencv import convert_cameras_to_opencv
    from aruco_detector import SimpleArUcoDetector
    from triangulation import triangulate_markers
    from config import CURRENT_IMAGE_SIZE
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    print("  - xmp_parser.py, xmp_to_opencv.py, aruco_detector.py")
    print("  - triangulation.py, config.py")
    sys.exit(1)


def validate_input_data(data_dir: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if not os.path.exists(data_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {data_dir}")
        return False
    
    # –ü–æ–∏—Å–∫ XMP —Ñ–∞–π–ª–æ–≤
    xmp_files = [f for f in os.listdir(data_dir) if f.endswith('.xmp')]
    if not xmp_files:
        print(f"‚ùå XMP —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {data_dir}")
        return False
    
    # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_extensions = ['.jpg', '.jpeg', '.png', '.bmp']
    image_files = []
    for f in os.listdir(data_dir):
        if any(f.lower().endswith(ext) for ext in image_extensions):
            image_files.append(f)
    
    if not image_files:
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {data_dir}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    xmp_ids = {os.path.splitext(f)[0] for f in xmp_files}
    image_ids = {os.path.splitext(f)[0] for f in image_files}
    common_ids = xmp_ids & image_ids
    
    if len(common_ids) < 3:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä XMP-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {len(common_ids)} < 3")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(xmp_files)} XMP —Ñ–∞–π–ª–æ–≤ –∏ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"   –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –ø–∞—Ä: {len(common_ids)}")
    return True


def load_cameras(data_dir: str):
    """–≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –∏–∑ XMP —Ñ–∞–π–ª–æ–≤"""
    print("\nüîß –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä")
    
    parser = SimpleXMPParser(enable_logging=False)
    xmp_cameras = parser.load_all_cameras(data_dir)
    
    if not xmp_cameras:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–º–µ—Ä—ã")
    
    print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–º–µ—Ä: {len(xmp_cameras)}")
    return xmp_cameras


def convert_cameras(xmp_cameras):
    """–≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç"""
    print("üîÑ –≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç")
    
    opencv_cameras = convert_cameras_to_opencv(xmp_cameras, CURRENT_IMAGE_SIZE)
    
    if not opencv_cameras:
        raise ValueError("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–∞–º–µ—Ä")
    
    print(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–º–µ—Ä: {len(opencv_cameras)}")
    return opencv_cameras


def detect_markers(data_dir: str):
    """–≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤"""
    print("üéØ –≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ (ID 1-13)")
    
    detector = SimpleArUcoDetector(enable_logging=False, filter_6x6=True)
    marker_detections = detector.detect_markers_in_directory(data_dir)
    
    if not marker_detections:
        raise ValueError("–ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_detections = sum(len(detections) for detections in marker_detections.values())
    unique_markers = set()
    for detections in marker_detections.values():
        unique_markers.update(detections.keys())
    
    # –ü–æ–¥—Å—á–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
    marker_frequency = {}
    for detections in marker_detections.values():
        for marker_id in detections.keys():
            marker_frequency[marker_id] = marker_frequency.get(marker_id, 0) + 1
    
    triangulatable_markers = sum(1 for freq in marker_frequency.values() if freq >= 3)
    found_markers = sorted(list(unique_markers))
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {found_markers}")
    print(f"   –í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ü–∏–π: {total_detections}")
    print(f"   –ì–æ—Ç–æ–≤—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏: {triangulatable_markers}")
    
    return marker_detections


def triangulate_all_markers(opencv_cameras, marker_detections):
    """–≠—Ç–∞–ø 4: 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤"""
    print("üî∫ –≠—Ç–∞–ø 4: 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"   –ö–∞–º–µ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {len(opencv_cameras)}")
    print(f"   –ö–∞–º–µ—Ä —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏: {len(marker_detections)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    camera_ids_opencv = set(opencv_cameras.keys())
    camera_ids_detections = set(marker_detections.keys())
    common_cameras = camera_ids_opencv & camera_ids_detections
    print(f"   –û–±—â–∏—Ö –∫–∞–º–µ—Ä: {len(common_cameras)}")
    
    if len(common_cameras) == 0:
        raise ValueError("–ù–µ—Ç –æ–±—â–∏—Ö –∫–∞–º–µ—Ä –º–µ–∂–¥—É OpenCV –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏")
    
    triangulated_markers = triangulate_markers(
        opencv_cameras,
        marker_detections,
        min_cameras=3,
        max_reprojection_error=200.0
    )
    
    if not triangulated_markers:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    high_confidence = sum(1 for m in triangulated_markers.values() if m.triangulation_confidence >= 0.7)
    avg_error = sum(m.reprojection_error for m in triangulated_markers.values()) / len(triangulated_markers)
    triangulated_ids = sorted(list(triangulated_markers.keys()))
    
    print(f"   –¢—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {triangulated_ids}")
    print(f"   –í—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {high_confidence}/{len(triangulated_markers)}")
    print(f"   –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {avg_error:.2f} –ø–∏–∫—Å")
    
    return triangulated_markers


def create_blender_files(triangulated_markers, opencv_cameras, xmp_cameras, output_dir: str, data_dir: str):
    """–≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ aruco_marker.json"""
    print("üé® –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ aruco_marker.json")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
    blender_data = prepare_blender_export(triangulated_markers)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
    json_file = os.path.join(output_dir, 'aruco_marker.json')
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(blender_data, f, indent=2, ensure_ascii=False)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    high_quality_markers = sum(1 for m in triangulated_markers.values() if m.triangulation_confidence >= 0.7)
    
    print(f"   üíæ JSON —Ñ–∞–π–ª: {json_file}")
    print(f"   üè∑Ô∏è –ú–∞—Ä–∫–µ—Ä–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞: {high_quality_markers}/{len(triangulated_markers)}")
    print(f"   üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(json_file) // 1024:.1f} KB")
    
    return json_file


def prepare_blender_export(triangulated_markers) -> dict:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON"""
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    high_confidence_count = sum(1 for m in triangulated_markers.values() if m.triangulation_confidence >= 0.7)
    medium_confidence_count = sum(1 for m in triangulated_markers.values() if 0.5 <= m.triangulation_confidence < 0.7)
    low_confidence_count = len(triangulated_markers) - high_confidence_count - medium_confidence_count
    
    blender_data = {
        'metadata': {
            'total_markers': len(triangulated_markers),
            'high_confidence_markers': high_confidence_count,
            'medium_confidence_markers': medium_confidence_count,
            'low_confidence_markers': low_confidence_count,
            'coordinate_system': 'realitycapture_absolute',
            'created_by': 'ArUco Autocalibration Pipeline',
            'format_version': '1.0'
        },
        'markers': {}
    }
    
    for marker_id, result in triangulated_markers.items():
        quality = 'high' if result.triangulation_confidence >= 0.7 else 'medium' if result.triangulation_confidence >= 0.5 else 'low'
        
        blender_data['markers'][f'marker_{marker_id}'] = {
            'id': marker_id,
            'position': list(result.position_3d),
            'confidence': result.triangulation_confidence,
            'quality': quality,
            'reprojection_error': result.reprojection_error,
            'observations_count': result.observations_count,
            'camera_ids': result.camera_ids
        }
    
    return blender_data


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    DATA_DIR = "data"
    OUTPUT_DIR = "results"
    
    print("üöÄ ArUco –ê–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ - –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω")
    print("=" * 50)
    print("–û—Ç XMP —Ñ–∞–π–ª–æ–≤ –¥–æ aruco_marker.json")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    
    try:
        start_time = time.time()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not validate_input_data(DATA_DIR):
            return 1
        
        # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–º–µ—Ä
        xmp_cameras = load_cameras(DATA_DIR)
        
        # –≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–∞–º–µ—Ä
        opencv_cameras = convert_cameras(xmp_cameras)
        
        # –≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
        marker_detections = detect_markers(DATA_DIR)
        
        # –≠—Ç–∞–ø 4: –¢—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è
        triangulated_markers = triangulate_all_markers(opencv_cameras, marker_detections)
        
        # –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
        json_file = create_blender_files(
            triangulated_markers, opencv_cameras, xmp_cameras, OUTPUT_DIR, DATA_DIR
        )
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        execution_time = time.time() - start_time
        
        print(f"\nüéâ –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f} —Å–µ–∫")
        print(f"üé® –¢—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {len(triangulated_markers)}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        high_quality_markers = sum(1 for m in triangulated_markers.values() if m.triangulation_confidence >= 0.7)
        medium_quality_markers = sum(1 for m in triangulated_markers.values() if 0.5 <= m.triangulation_confidence < 0.7)
        low_quality_markers = sum(1 for m in triangulated_markers.values() if m.triangulation_confidence < 0.5)
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
        print(f"   üè∑Ô∏è –ú–∞—Ä–∫–µ—Ä—ã - üü¢ {high_quality_markers}  üü° {medium_quality_markers}  üü† {low_quality_markers}")
        
        print(f"\nüìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç: {OUTPUT_DIR}")
        print(f"   üíæ {os.path.basename(json_file)} - –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤")
        print(f"")
        print(f"üéØ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON:")
        print(f"   ‚Ä¢ metadata - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏")
        print(f"   ‚Ä¢ markers - 3D –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏")
        print(f"")
        print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Ä–∫–µ—Ä–∞:")
        print(f"   ‚Ä¢ id - –Ω–æ–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ (1-13)")
        print(f"   ‚Ä¢ position - [X, Y, Z] –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–µ—Ç—Ä–∞—Ö")
        print(f"   ‚Ä¢ confidence - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏ (0-1)")
        print(f"   ‚Ä¢ quality - 'high'/'medium'/'low'")
        print(f"   ‚Ä¢ reprojection_error - –æ—à–∏–±–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö")
        print(f"   ‚Ä¢ observations_count - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–µ—Ä")
        print(f"   ‚Ä¢ camera_ids - —Å–ø–∏—Å–æ–∫ ID –∫–∞–º–µ—Ä")
        print(f"")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        if high_quality_markers >= 8:
            print(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ! {high_quality_markers} –º–∞—Ä–∫–µ—Ä–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        elif high_quality_markers >= 5:
            print(f"‚ö†Ô∏è  –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ. {high_quality_markers} –º–∞—Ä–∫–µ—Ä–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        else:
            print(f"‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. –¢–æ–ª—å–∫–æ {high_quality_markers} –º–∞—Ä–∫–µ—Ä–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        
        print(f"\nüí° JSON –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö!")
        
        return 0
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        return 1


if __name__ == "__main__":
    exit(main())