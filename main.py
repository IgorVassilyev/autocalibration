#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ ArUco –º–∞—Ä–∫–µ—Ä–æ–≤
======================================================

–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ—Ç XMP —Ñ–∞–π–ª–æ–≤ –¥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏:
1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –∏–∑ XMP —Ñ–∞–π–ª–æ–≤
2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
3. –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö DICT_4X4_1000
4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py --data_dir data --output_dir results
    python main.py --data_dir data --output_dir results --detect_only
    python main.py --help
"""

import os
import sys
import argparse
import json
import time
from typing import Dict, Any, Optional
import logging

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from xmp_parser import SimpleXMPParser
    from xmp_to_opencv import convert_cameras_to_opencv
    from aruco_detector import SimpleArUcoDetector, detect_all_markers_in_directory
    from config import CURRENT_IMAGE_SIZE
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
    print("  - xmp_parser.py")
    print("  - xmp_to_opencv.py") 
    print("  - aruco_detector.py")
    print("  - config.py")
    sys.exit(1)


class AutoCalibrationPipeline:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    """
    
    def __init__(self, data_dir: str, output_dir: str, 
                 enable_logging: bool = True, save_intermediate: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
        
        Parameters:
        -----------
        data_dir : str
            –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å XMP —Ñ–∞–π–ª–∞–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        output_dir : str
            –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        enable_logging : bool
            –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        save_intermediate : bool
            –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        """
        self.data_dir = data_dir
        self.output_dir = output_dir
        self.enable_logging = enable_logging
        self.save_intermediate = save_intermediate
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(output_dir, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if enable_logging:
            self._setup_logging()
        
        self.logger = logging.getLogger(__name__)
        
        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.xmp_cameras = {}
        self.opencv_cameras = {}
        self.marker_detections = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.pipeline_stats = {
            'start_time': None,
            'end_time': None,
            'stages_completed': [],
            'stages_failed': [],
            'total_execution_time': 0
        }
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_file = os.path.join(self.output_dir, 'pipeline.log')
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file, encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
    
    def validate_input_data(self) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
        --------
        bool
            True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã
        """
        print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not os.path.exists(self.data_dir):
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.data_dir}")
            return False
        
        # –ü–æ–∏—Å–∫ XMP —Ñ–∞–π–ª–æ–≤
        xmp_files = [f for f in os.listdir(self.data_dir) if f.endswith('.xmp')]
        if not xmp_files:
            print(f"‚ùå XMP —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {self.data_dir}")
            return False
        
        # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_extensions = ['.jpg', '.jpeg', '.png', '.bmp']
        image_files = []
        for f in os.listdir(self.data_dir):
            if any(f.lower().endswith(ext) for ext in image_extensions):
                image_files.append(f)
        
        if not image_files:
            print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {self.data_dir}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è XMP —Ñ–∞–π–ª–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        xmp_ids = {os.path.splitext(f)[0] for f in xmp_files}
        image_ids = {os.path.splitext(f)[0] for f in image_files}
        
        missing_images = xmp_ids - image_ids
        missing_xmp = image_ids - xmp_ids
        
        if missing_images:
            print(f"‚ö†Ô∏è  –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è XMP: {missing_images}")
        
        if missing_xmp:
            print(f"‚ö†Ô∏è  –ù–µ—Ç XMP –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {missing_xmp}")
        
        common_ids = xmp_ids & image_ids
        if len(common_ids) < 3:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä XMP-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {len(common_ids)} < 3")
            return False
        
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞:")
        print(f"   XMP —Ñ–∞–π–ª–æ–≤: {len(xmp_files)}")
        print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
        print(f"   –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –ø–∞—Ä: {len(common_ids)}")
        
        return True
    
    def stage_1_load_cameras(self) -> bool:
        """
        –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –∏–∑ XMP —Ñ–∞–π–ª–æ–≤
        """
        stage_name = "load_cameras"
        print("\nüîß –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä")
        print("-" * 40)
        
        try:
            parser = SimpleXMPParser(enable_logging=self.enable_logging)
            self.xmp_cameras = parser.load_all_cameras(self.data_dir)
            
            if not self.xmp_cameras:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–º–µ—Ä—ã")
            
            # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = parser.get_summary_stats()
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä:")
            print(f"   –í—Å–µ–≥–æ –∫–∞–º–µ—Ä: {stats['total_cameras']}")
            print(f"   –î–∏–∞–ø–∞–∑–æ–Ω —Ñ–æ–∫—É—Å–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: {stats['focal_length_range'][0]:.1f}-{stats['focal_length_range'][1]:.1f}mm")
            print(f"   –ú–æ–¥–µ–ª–∏ –¥–∏—Å—Ç–æ—Ä—Å–∏–∏: {', '.join(stats['distortion_models'])}")
            print(f"   –°–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {', '.join(stats['coordinate_systems'])}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if self.save_intermediate:
                output_path = os.path.join(self.output_dir, 'stage1_xmp_cameras.json')
                parser.export_summary_report(os.path.join(self.output_dir, 'stage1_xmp_report.txt'))
                print(f"üíæ –û—Ç—á–µ—Ç XMP –∫–∞–º–µ—Ä: {os.path.join(self.output_dir, 'stage1_xmp_report.txt')}")
            
            self.pipeline_stats['stages_completed'].append(stage_name)
            print(f"‚úÖ –≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.pipeline_stats['stages_failed'].append(stage_name)
            print(f"‚ùå –≠—Ç–∞–ø 1 –Ω–µ—É–¥–∞—á–µ–Ω: {e}")
            return False
    
    def stage_2_convert_cameras(self) -> bool:
        """
        –≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
        """
        stage_name = "convert_cameras"
        print("\nüîÑ –≠–¢–ê–ü 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç")
        print("-" * 40)
        
        try:
            self.opencv_cameras = convert_cameras_to_opencv(
                self.xmp_cameras, 
                CURRENT_IMAGE_SIZE
            )
            
            if not self.opencv_cameras:
                raise ValueError("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–∞–º–µ—Ä")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã
            first_camera_id = next(iter(self.opencv_cameras))
            first_camera = self.opencv_cameras[first_camera_id]
            
            print(f"üì∑ –ü—Ä–∏–º–µ—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–∞–º–µ—Ä—ã {first_camera_id}:")
            print(f"   –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {CURRENT_IMAGE_SIZE[0]}√ó{CURRENT_IMAGE_SIZE[1]} –ø–∏–∫—Å–µ–ª–µ–π")
            print(f"   –§–æ–∫—É—Å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: fx={first_camera['fx']:.1f}, fy={first_camera['fy']:.1f} –ø–∏–∫—Å")
            print(f"   –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞: cx={first_camera['cx']:.1f}, cy={first_camera['cy']:.1f} –ø–∏–∫—Å")
            
            warnings = first_camera.get('conversion_warnings', [])
            if warnings:
                print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {'; '.join(warnings)}")
            else:
                print(f"   ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if self.save_intermediate:
                output_path = os.path.join(self.output_dir, 'stage2_opencv_cameras.json')
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º numpy –º–∞—Å—Å–∏–≤—ã –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON
                json_data = {}
                for cam_id, cam_data in self.opencv_cameras.items():
                    json_data[cam_id] = {
                        'camera_matrix': cam_data['camera_matrix'].tolist(),
                        'distortion_coeffs': cam_data['distortion_coeffs'].tolist(),
                        'fx': float(cam_data['fx']),
                        'fy': float(cam_data['fy']),
                        'cx': float(cam_data['cx']),
                        'cy': float(cam_data['cy']),
                        'position': cam_data['position'].tolist(),
                        'rotation': cam_data['rotation'].tolist(),
                        'image_size': cam_data['image_size'],
                        'conversion_warnings': cam_data.get('conversion_warnings', [])
                    }
                
                with open(output_path, 'w', encoding='utf-8') as f:
                    json.dump(json_data, f, indent=2, ensure_ascii=False)
                print(f"üíæ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã OpenCV –∫–∞–º–µ—Ä: {output_path}")
            
            self.pipeline_stats['stages_completed'].append(stage_name)
            print(f"‚úÖ –≠—Ç–∞–ø 2 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.pipeline_stats['stages_failed'].append(stage_name)
            print(f"‚ùå –≠—Ç–∞–ø 2 –Ω–µ—É–¥–∞—á–µ–Ω: {e}")
            return False
    
    def stage_3_detect_markers(self, create_marked_images: bool = False) -> bool:
        """
        –≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ DICT_4X4_1000
        """
        stage_name = "detect_markers"
        print("\nüéØ –≠–¢–ê–ü 3: –î–µ—Ç–µ–∫—Ü–∏—è ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ (DICT_4X4_1000)")
        print("-" * 40)
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            detection_json = os.path.join(self.output_dir, 'stage3_marker_detections.json')
            marked_images_dir = os.path.join(self.output_dir, 'marked_images') if create_marked_images else None
            
            # –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏
            self.marker_detections = detect_all_markers_in_directory(
                directory=self.data_dir,
                output_file=detection_json,
                create_images=create_marked_images,
                images_output_dir=marked_images_dir
            )
            
            if not self.marker_detections:
                raise ValueError("–ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏
            total_detections = sum(len(detections) for detections in self.marker_detections.values())
            unique_markers = set()
            for detections in self.marker_detections.values():
                unique_markers.update(detections.keys())
            
            # –ü–æ–¥—Å—á–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
            marker_frequency = {}
            for detections in self.marker_detections.values():
                for marker_id in detections.keys():
                    marker_frequency[marker_id] = marker_frequency.get(marker_id, 0) + 1
            
            triangulatable_markers = sum(1 for freq in marker_frequency.values() if freq >= 3)
            
            print(f"\nüéØ –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –î–ï–¢–ï–ö–¶–ò–ò:")
            print(f"   –í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ü–∏–π: {total_detections}")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: {len(unique_markers)}")
            print(f"   –ì–æ—Ç–æ–≤—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏ (‚â•3 –∫–∞–º–µ—Ä): {triangulatable_markers}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
            if triangulatable_markers < 3:
                print(f"   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏!")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3 –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ ‚â•3 –∫–∞–º–µ—Ä–∞—Ö")
            elif triangulatable_markers >= 8:
                print(f"   ‚úÖ –û–¢–õ–ò–ß–ù–û: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏")
            else:
                print(f"   ‚ö†Ô∏è  –•–û–†–û–®–û: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏")
            
            if create_marked_images:
                print(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏: {marked_images_dir}")
            
            self.pipeline_stats['stages_completed'].append(stage_name)
            print(f"‚úÖ –≠—Ç–∞–ø 3 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.pipeline_stats['stages_failed'].append(stage_name)
            print(f"‚ùå –≠—Ç–∞–ø 3 –Ω–µ—É–¥–∞—á–µ–Ω: {e}")
            return False
    
    def stage_4_prepare_triangulation_data(self) -> bool:
        """
        –≠—Ç–∞–ø 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
        """
        stage_name = "prepare_triangulation"
        print("\nüìê –≠–¢–ê–ü 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏")
        print("-" * 40)
        
        try:
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
            triangulation_data = {
                'metadata': {
                    'pipeline_version': '1.0',
                    'image_size': CURRENT_IMAGE_SIZE,
                    'aruco_dictionary': 'DICT_4X4_1000',
                    'total_cameras': len(self.opencv_cameras),
                    'total_detections': sum(len(d) for d in self.marker_detections.values()),
                    'processing_date': time.strftime('%Y-%m-%d %H:%M:%S')
                },
                'cameras': {},
                'markers': {}
            }
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä
            for camera_id, opencv_data in self.opencv_cameras.items():
                triangulation_data['cameras'][camera_id] = {
                    'camera_matrix': opencv_data['camera_matrix'].tolist(),
                    'distortion_coeffs': opencv_data['distortion_coeffs'].tolist(),
                    'position': opencv_data['position'].tolist(),
                    'rotation': opencv_data['rotation'].tolist(),
                    'fx': float(opencv_data['fx']),
                    'fy': float(opencv_data['fy']),
                    'cx': float(opencv_data['cx']),
                    'cy': float(opencv_data['cy']),
                    'image_size': opencv_data['image_size']
                }
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–π –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
            for camera_id, detections in self.marker_detections.items():
                if camera_id not in self.opencv_cameras:
                    print(f"   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–º–µ—Ä—É {camera_id}: –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä—ã")
                    continue
                    
                for marker_id, detection in detections.items():
                    if marker_id not in triangulation_data['markers']:
                        triangulation_data['markers'][marker_id] = {
                            'observations': [],
                            'cameras_count': 0
                        }
                    
                    triangulation_data['markers'][marker_id]['observations'].append({
                        'camera_id': camera_id,
                        'center': detection.center,
                        'corners': detection.corners,
                        'area': detection.area
                    })
                    triangulation_data['markers'][marker_id]['cameras_count'] += 1
            
            # –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
            print(f"üìä –ê–ù–ê–õ–ò–ó –ì–û–¢–û–í–ù–û–°–¢–ò –î–õ–Ø –¢–†–ò–ê–ù–ì–£–õ–Ø–¶–ò–ò:")
            
            markers_by_camera_count = {}
            for marker_id, marker_data in triangulation_data['markers'].items():
                cam_count = marker_data['cameras_count']
                if cam_count not in markers_by_camera_count:
                    markers_by_camera_count[cam_count] = []
                markers_by_camera_count[cam_count].append(marker_id)
            
            for cam_count in sorted(markers_by_camera_count.keys(), reverse=True):
                markers = markers_by_camera_count[cam_count]
                status = "‚úÖ" if cam_count >= 3 else "‚ö†Ô∏è" if cam_count >= 2 else "‚ùå"
                print(f"   {cam_count} –∫–∞–º–µ—Ä: {len(markers)} –º–∞—Ä–∫–µ—Ä–æ–≤ {status} {markers}")
            
            # –ü–æ–¥—Å—á–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
            ready_for_triangulation = sum(
                len(markers) for cam_count, markers in markers_by_camera_count.items() 
                if cam_count >= 3
            )
            
            triangulation_data['metadata']['triangulatable_markers'] = ready_for_triangulation
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
            if self.save_intermediate:
                output_path = os.path.join(self.output_dir, 'stage4_triangulation_ready.json')
                with open(output_path, 'w', encoding='utf-8') as f:
                    json.dump(triangulation_data, f, indent=2, ensure_ascii=False)
                print(f"üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏: {output_path}")
            
            print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –ì–û–¢–û–í–ù–û–°–¢–¨:")
            print(f"   –ú–∞—Ä–∫–µ—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏: {ready_for_triangulation}")
            
            if ready_for_triangulation >= 8:
                print(f"   ‚úÖ –û–¢–õ–ò–ß–ù–û! –ì–æ—Ç–æ–≤–æ –¥–ª—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏")
            elif ready_for_triangulation >= 5:
                print(f"   ‚ö†Ô∏è  –•–û–†–û–®–û! –ì–æ—Ç–æ–≤–æ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏")
            elif ready_for_triangulation >= 3:
                print(f"   ‚ö†Ô∏è  –ú–ò–ù–ò–ú–ê–õ–¨–ù–û! –í–æ–∑–º–æ–∂–Ω–∞ –±–∞–∑–æ–≤–∞—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è")
            else:
                print(f"   ‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏")
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä—ã")
            
            self.pipeline_stats['stages_completed'].append(stage_name)
            print(f"‚úÖ –≠—Ç–∞–ø 4 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.pipeline_stats['stages_failed'].append(stage_name)
            print(f"‚ùå –≠—Ç–∞–ø 4 –Ω–µ—É–¥–∞—á–µ–Ω: {e}")
            return False
    
    def create_final_report(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        
        report_path = os.path.join(self.output_dir, 'pipeline_report.md')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_time = self.pipeline_stats['total_execution_time']
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_cameras = len(self.opencv_cameras)
        total_detections = sum(len(d) for d in self.marker_detections.values()) if self.marker_detections else 0
        unique_markers = len(set().union(*[d.keys() for d in self.marker_detections.values()])) if self.marker_detections else 0
        
        # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
        marker_frequency = {}
        if self.marker_detections:
            for detections in self.marker_detections.values():
                for marker_id in detections.keys():
                    marker_frequency[marker_id] = marker_frequency.get(marker_id, 0) + 1
        
        triangulatable_markers = sum(1 for freq in marker_frequency.values() if freq >= 3)
        
        # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_content = f"""# –û—Ç—á–µ—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ ArUco –º–∞—Ä–∫–µ—Ä–æ–≤

## –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

- **–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**: {time.strftime('%Y-%m-%d %H:%M:%S')}
- **–í—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è**: {self.data_dir}
- **–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è**: {self.output_dir}
- **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**: {execution_time:.2f} —Å–µ–∫—É–Ω–¥
- **–°–ª–æ–≤–∞—Ä—å ArUco**: DICT_4X4_1000

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–∞–ø–æ–≤

### ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã
{chr(10).join([f"- {stage}" for stage in self.pipeline_stats['stages_completed']])}

### ‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —ç—Ç–∞–ø—ã
{chr(10).join([f"- {stage}" for stage in self.pipeline_stats['stages_failed']]) if self.pipeline_stats['stages_failed'] else "–í—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"}

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö

### –ö–∞–º–µ—Ä—ã
- –ó–∞–≥—Ä—É–∂–µ–Ω–æ XMP —Ñ–∞–π–ª–æ–≤: {len(self.xmp_cameras)}
- –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–º–µ—Ä: {total_cameras}
- –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {CURRENT_IMAGE_SIZE[0]}√ó{CURRENT_IMAGE_SIZE[1]} –ø–∏–∫—Å–µ–ª–µ–π

### ArUco –º–∞—Ä–∫–µ—Ä—ã
- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(self.marker_detections) if self.marker_detections else 0}
- –í—Å–µ–≥–æ –¥–µ—Ç–µ–∫—Ü–∏–π: {total_detections}
- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {unique_markers}
- **–ì–æ—Ç–æ–≤—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏: {triangulatable_markers}**

## –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤

{"### ‚úÖ –û–¢–õ–ò–ß–ù–û! –ì–æ—Ç–æ–≤–æ –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏" if triangulatable_markers >= 8 else "### ‚ö†Ô∏è –î–û–°–¢–ê–¢–û–ß–ù–û –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏" if triangulatable_markers >= 3 else "### ‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏"}

{f"–ù–∞–π–¥–µ–Ω–æ {triangulatable_markers} –º–∞—Ä–∫–µ—Ä–æ–≤ –≤–∏–¥–∏–º—ã—Ö –Ω–∞ ‚â•3 –∫–∞–º–µ—Ä–∞—Ö. –≠—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏." if triangulatable_markers >= 8 else f"–ù–∞–π–¥–µ–Ω–æ {triangulatable_markers} –º–∞—Ä–∫–µ—Ä–æ–≤ –≤–∏–¥–∏–º—ã—Ö –Ω–∞ ‚â•3 –∫–∞–º–µ—Ä–∞—Ö. –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—é." if triangulatable_markers >= 3 else f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {triangulatable_markers} –º–∞—Ä–∫–µ—Ä–æ–≤ –≤–∏–¥–∏–º—ã—Ö –Ω–∞ ‚â•3 –∫–∞–º–µ—Ä–∞—Ö. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏."}

## –í—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã

### –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
- `stage1_xmp_report.txt` - –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ XMP —Ñ–∞–π–ª–∞–º
- `stage2_opencv_cameras.json` - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç–µ  
- `stage3_marker_detections.json` - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
- `stage4_triangulation_ready.json` - –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã–µ –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏

### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
- `marked_images/` - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏ (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å)
- `pipeline.log` - –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- `pipeline_report.md` - –≠—Ç–æ—Ç –æ—Ç—á–µ—Ç

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

{f"1. ‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è 3D —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏" if triangulatable_markers >= 3 else "1. ‚ùå –£–ª—É—á—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤"}
{f"2. ‚úÖ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏" if triangulatable_markers >= 3 else "2. ‚ùå –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–ª–∏ —É–ª—É—á—à–∏—Ç–µ –∏—Ö –∫–∞—á–µ—Å—Ç–≤–æ"}
{f"3. ‚úÖ –ü–æ—Å–ª–µ —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏ - —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è Blender" if triangulatable_markers >= 3 else "3. ‚ùå –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ—Ç–µ–∫—Ü–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"}

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

- **–†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**: {CURRENT_IMAGE_SIZE[0]}√ó{CURRENT_IMAGE_SIZE[1]} –ø–∏–∫—Å–µ–ª–µ–π
- **–°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç**: RealityCapture absolute
- **–ì–æ—Ç–æ–≤–æ –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏**: {"–î–∞" if triangulatable_markers >= 3 else "–ù–µ—Ç"}

---
*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–æ–º –∞–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ ArUco –º–∞—Ä–∫–µ—Ä–æ–≤*
"""
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        print(f"üìã –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_path}")
    
    def run_detection_pipeline(self, create_marked_images: bool = False) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ (—ç—Ç–∞–ø—ã 1-4)
        
        Parameters:
        -----------
        create_marked_images : bool
            –°–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
            
        Returns:
        --------
        bool
            True –µ—Å–ª–∏ –ø–∞–π–ø–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        self.pipeline_stats['start_time'] = time.time()
        
        print("üöÄ –ó–ê–ü–£–°–ö –ü–ê–ô–ü–õ–ê–ô–ù–ê –î–ï–¢–ï–ö–¶–ò–ò ARUCO –ú–ê–†–ö–ï–†–û–í")
        print("=" * 80)
        print(f"üìÇ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.data_dir}")
        print(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {self.output_dir}")
        print(f"üîç –°–ª–æ–≤–∞—Ä—å ArUco: DICT_4X4_1000")
        print("=" * 80)
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not self.validate_input_data():
                return False
            
            # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–º–µ—Ä
            if not self.stage_1_load_cameras():
                return False
            
            # –≠—Ç–∞–ø 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–∞–º–µ—Ä
            if not self.stage_2_convert_cameras():
                return False
            
            # –≠—Ç–∞–ø 3: –î–µ—Ç–µ–∫—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
            if not self.stage_3_detect_markers(create_marked_images):
                return False
            
            # –≠—Ç–∞–ø 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏
            if not self.stage_4_prepare_triangulation_data():
                return False
            
            # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
            self.pipeline_stats['end_time'] = time.time()
            self.pipeline_stats['total_execution_time'] = (
                self.pipeline_stats['end_time'] - self.pipeline_stats['start_time']
            )
            
            self.create_final_report()
            
            print(f"\nüéâ –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {self.pipeline_stats['total_execution_time']:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìÇ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_dir}")
            
            return True
            
        except Exception as e:
            self.pipeline_stats['end_time'] = time.time()
            self.pipeline_stats['total_execution_time'] = (
                self.pipeline_stats['end_time'] - self.pipeline_stats['start_time']
            )
            
            print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–ê–ô–ü–õ–ê–ô–ù–ê: {e}")
            self.create_final_report()
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    parser = argparse.ArgumentParser(
        description="–ü–∞–π–ø–ª–∞–π–Ω –∞–≤—Ç–æ–∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ ArUco –º–∞—Ä–∫–µ—Ä–æ–≤ (DICT_4X4_1000)",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py --data_dir data --output_dir results
  python main.py --data_dir data --output_dir results --create_images
  python main.py --data_dir data --output_dir results --verbose --create_images
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument(
        '--data_dir', '--data',
        default='data',
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å XMP —Ñ–∞–π–ª–∞–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data)'
    )
    
    parser.add_argument(
        '--output_dir', '--output',
        default='results',
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: results)'
    )
    
    # –û–ø—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'
    )
    
    parser.add_argument(
        '--no_intermediate',
        action='store_true',
        help='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
    )
    
    parser.add_argument(
        '--create_images',
        action='store_true',
        help='–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏'
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(args.data_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.data_dir}")
        return 1
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞
    pipeline = AutoCalibrationPipeline(
        data_dir=args.data_dir,
        output_dir=args.output_dir,
        enable_logging=args.verbose,
        save_intermediate=not args.no_intermediate
    )
    
    # –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
    success = pipeline.run_detection_pipeline(create_marked_images=args.create_images)
    
    return 0 if success else 1


if __name__ == "__main__":
    exit(main())