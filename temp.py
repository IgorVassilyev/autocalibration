"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ ArUco-–º–∞—Ä–∫–µ—Ä–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Blender
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞—Ä–∫–µ—Ä—ã –∫–∞–∫ Empty –æ–±—ä–µ–∫—Ç—ã –∏ –∫–∞–º–µ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
"""

import bpy
import os
import sys
import xml.etree.ElementTree as ET
import numpy as np
from mathutils import Vector, Matrix

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å –¥–ª—è OpenCV
user_site_packages = r"C:\Users\admin\AppData\Roaming\Python\Python311\site-packages"
if user_site_packages not in sys.path:
    sys.path.insert(0, user_site_packages)

try:
    import cv2
    print(f"‚úì OpenCV {cv2.__version__} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
except ImportError:
    print("‚ùå OpenCV –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É.")
    exit()

class SimpleXMPParser:
    """–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä XMP-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä"""
    
    def __init__(self):
        self.cameras_data = {}
        
    def parse_xmp_file(self, xmp_path):
        """–ü–∞—Ä—Å–∏—Ç XMP-—Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã"""
        try:
            tree = ET.parse(xmp_path)
            root = tree.getroot()
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç Description
            ns = {'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
                  'xcr': 'http://www.capturingreality.com/ns/xcr/1.1#'}
            
            desc = root.find('.//rdf:Description', ns)
            if desc is None:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            camera_data = {
                'file_path': xmp_path,
                'filename': os.path.basename(xmp_path),
                'position': self._parse_position(desc.find('xcr:Position', ns)),
                'rotation': self._parse_rotation(desc.find('xcr:Rotation', ns)),
                'focal_length': float(desc.get('{http://www.capturingreality.com/ns/xcr/1.1#}FocalLength35mm', 35.0)),
                'principal_point_u': float(desc.get('{http://www.capturingreality.com/ns/xcr/1.1#}PrincipalPointU', 0.0)),
                'principal_point_v': float(desc.get('{http://www.capturingreality.com/ns/xcr/1.1#}PrincipalPointV', 0.0)),
                'distortion': self._parse_distortion(desc.find('xcr:DistortionCoeficients', ns)),
                'aspect_ratio': float(desc.get('{http://www.capturingreality.com/ns/xcr/1.1#}AspectRatio', 1.0))
            }
            
            return camera_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {xmp_path}: {e}")
            return None
    
    def _parse_position(self, pos_element):
        if pos_element is not None and pos_element.text:
            coords = list(map(float, pos_element.text.split()))
            return np.array(coords)
        return np.array([0.0, 0.0, 0.0])
    
    def _parse_rotation(self, rot_element):
        if rot_element is not None and rot_element.text:
            values = list(map(float, rot_element.text.split()))
            return np.array(values).reshape(3, 3)
        return np.eye(3)
    
    def _parse_distortion(self, dist_element):
        if dist_element is not None and dist_element.text:
            return np.array(list(map(float, dist_element.text.split())))
        return np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    
    def load_all_cameras(self, directory):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–∞–º–µ—Ä—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        xmp_files = [f for f in os.listdir(directory) if f.endswith('.xmp')]
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(xmp_files)} XMP-—Ñ–∞–π–ª–æ–≤")
        
        for xmp_file in sorted(xmp_files):
            xmp_path = os.path.join(directory, xmp_file)
            camera_data = self.parse_xmp_file(xmp_path)
            
            if camera_data:
                camera_id = os.path.splitext(xmp_file)[0]
                self.cameras_data[camera_id] = camera_data
                print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞–º–µ—Ä–∞: {camera_id}")
        
        print(f"üé• –í—Å–µ–≥–æ –∫–∞–º–µ—Ä: {len(self.cameras_data)}")
        return self.cameras_data

class SimpleArUcoDetector:
    """–ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä ArUco-–º–∞—Ä–∫–µ—Ä–æ–≤"""
    
    def __init__(self):
        # –ù–æ–≤—ã–π API OpenCV 4.7+
        self.aruco_dict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_4X4_50)
        self.parameters = cv2.aruco.DetectorParameters()
        
        # –û–°–õ–ê–ë–õ–Ø–ï–ú –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
        # –£–º–µ–Ω—å—à–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞
        self.parameters.minMarkerPerimeterRate = 0.01  # –±—ã–ª–æ 0.03, –¥–µ–ª–∞–µ–º –º–µ–Ω—å—à–µ
        self.parameters.maxMarkerPerimeterRate = 8.0   # –±—ã–ª–æ 4.0, –¥–µ–ª–∞–µ–º –±–æ–ª—å—à–µ
        
        # –û—Å–ª–∞–±–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏ —É–≥–ª–æ–≤
        self.parameters.polygonalApproxAccuracyRate = 0.05  # –±—ã–ª–æ 0.03, –¥–µ–ª–∞–µ–º –º—è–≥—á–µ
        self.parameters.minCornerDistanceRate = 0.03       # –±—ã–ª–æ 0.05, –¥–µ–ª–∞–µ–º –º–µ–Ω—å—à–µ
        
        # –£–º–µ–Ω—å—à–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –≥—Ä–∞–Ω–∏—Ü
        self.parameters.minDistanceToBorder = 1  # –±—ã–ª–æ 3, –¥–µ–ª–∞–µ–º –º–µ–Ω—å—à–µ
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –ø–æ—Ä–æ–≥–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        self.parameters.adaptiveThreshWinSizeMin = 3
        self.parameters.adaptiveThreshWinSizeMax = 23
        self.parameters.adaptiveThreshWinSizeStep = 10
        self.parameters.adaptiveThreshConstant = 5  # –±—ã–ª–æ 7, –¥–µ–ª–∞–µ–º –º—è–≥—á–µ
        
        # –û—Å–ª–∞–±–ª—è–µ–º –¥—Ä—É–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        self.parameters.minMarkerDistanceRate = 0.03  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ä–∞–º–∏
        self.parameters.markerBorderBits = 1          # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–Ω—ã—Ö –±–∏—Ç–æ–≤ –≤–æ–∫—Ä—É–≥ –º–∞—Ä–∫–µ—Ä–∞
        
        self.detector = cv2.aruco.ArucoDetector(self.aruco_dict, self.parameters)
        print("üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –º—è–≥–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ ArUco")
        
    def detect_markers(self, image_path):
        """–î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        try:
            image = cv2.imread(image_path)
            if image is None:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {image_path}")
                return {}
            
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            corners, ids, rejected = self.detector.detectMarkers(gray)
            
            markers_info = {}
            
            if ids is not None:
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(ids)} –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ {os.path.basename(image_path)}")
                
                for i, marker_id in enumerate(ids.flatten()):
                    marker_corners = corners[i][0]
                    center = np.mean(marker_corners, axis=0)
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    distances = []
                    for j in range(4):
                        next_j = (j + 1) % 4
                        dist = np.linalg.norm(marker_corners[j] - marker_corners[next_j])
                        distances.append(dist)
                    avg_size = np.mean(distances)
                    
                    markers_info[int(marker_id)] = {
                        'corners': marker_corners,
                        'center': center,
                        'size': avg_size,
                        'image_path': image_path
                    }
                    
                    print(f"  üìç –ú–∞—Ä–∫–µ—Ä {marker_id}: —Ü–µ–Ω—Ç—Ä ({center[0]:.0f}, {center[1]:.0f}), —Ä–∞–∑–º–µ—Ä {avg_size:.0f}px")
            else:
                print(f"‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {os.path.basename(image_path)}")
                print(f"   üìã –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(rejected)}")
                if len(rejected) > 0:
                    print("   üí° –°–æ–≤–µ—Ç: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏")
            
            return markers_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤ {image_path}: {e}")
            return {}

class SimpleTriangulator:
    """–ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è 3D-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    
    def __init__(self, cameras_data):
        self.cameras_data = cameras_data
        self.sensor_width = 36.0  # –º–º
        
    def create_camera_matrix(self, camera_data, image_width, image_height):
        """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –∫–∞–º–µ—Ä—ã"""
        focal_length_mm = camera_data['focal_length'] * self.sensor_width / 36.0
        focal_length_px = focal_length_mm * image_width / self.sensor_width
        
        cx = image_width / 2.0 + camera_data['principal_point_u'] * image_width
        cy = image_height / 2.0 + camera_data['principal_point_v'] * image_height
        
        camera_matrix = np.array([
            [focal_length_px, 0, cx],
            [0, focal_length_px * camera_data['aspect_ratio'], cy],
            [0, 0, 1]
        ])
        
        return camera_matrix
    
    def triangulate_marker(self, marker_observations, image_width=1920, image_height=1080):
        """–¢—Ä–∏–∞–Ω–≥—É–ª–∏—Ä—É–µ—Ç 3D-–ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–µ—Ä–∞"""
        if len(marker_observations) < 2:
            return None
        
        try:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ –∫–∞–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            obs1, obs2 = marker_observations[0], marker_observations[1]
            
            cam1_data = self.cameras_data[obs1['camera_id']]
            cam2_data = self.cameras_data[obs2['camera_id']]
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—ã –∫–∞–º–µ—Ä
            K1 = self.create_camera_matrix(cam1_data, image_width, image_height)
            K2 = self.create_camera_matrix(cam2_data, image_width, image_height)
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–æ–µ–∫—Ü–∏–∏
            R1, t1 = cam1_data['rotation'], cam1_data['position']
            R2, t2 = cam2_data['rotation'], cam2_data['position']
            
            P1 = np.dot(K1, np.hstack([R1, t1.reshape(-1, 1)]))
            P2 = np.dot(K2, np.hstack([R2, t2.reshape(-1, 1)]))
            
            # –¢—Ä–∏–∞–Ω–≥—É–ª–∏—Ä—É–µ–º
            point1 = obs1['center'].reshape(-1, 1)
            point2 = obs2['center'].reshape(-1, 1)
            
            point_4d = cv2.triangulatePoints(P1, P2, point1, point2)
            point_3d = point_4d[:3] / point_4d[3]
            
            return point_3d.flatten()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏: {e}")
            return None

class BlenderVisualizer:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ Blender"""
    
    def __init__(self):
        self.clear_scene()
        
    def clear_scene(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ü–µ–Ω—É"""
        bpy.ops.object.select_all(action='SELECT')
        bpy.ops.object.delete(use_global=False)
    
    def create_marker_empty(self, marker_id, position):
        """–°–æ–∑–¥–∞–µ—Ç Empty –æ–±—ä–µ–∫—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è Blender (Y –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è)
        blender_pos = [position[0], -position[1], position[2]]
        
        bpy.ops.object.empty_add(type='PLAIN_AXES', location=blender_pos)
        empty = bpy.context.object
        empty.name = f"ArUco_Marker_{marker_id}"
        empty.empty_display_size = 0.1
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É
        bpy.ops.object.text_add(location=(blender_pos[0], blender_pos[1], blender_pos[2] + 0.15))
        text_obj = bpy.context.object
        text_obj.name = f"Label_{marker_id}"
        text_obj.data.body = str(marker_id)
        text_obj.data.size = 0.1
        
        print(f"‚úì –°–æ–∑–¥–∞–Ω –º–∞—Ä–∫–µ—Ä {marker_id} –≤ –ø–æ–∑–∏—Ü–∏–∏ {blender_pos}")
        
        return empty
    
    def create_camera_object(self, camera_id, camera_data):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–∞–º–µ—Ä—ã"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è Blender
        pos = camera_data['position']
        blender_pos = [pos[0], -pos[1], pos[2]]
        
        bpy.ops.object.camera_add(location=blender_pos)
        camera_obj = bpy.context.object
        camera_obj.name = f"Camera_{camera_id}"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã
        camera_obj.data.lens = camera_data['focal_length']
        camera_obj.data.sensor_width = 36.0
        
        print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –∫–∞–º–µ—Ä–∞ {camera_id}")
        
        return camera_obj
    
    def create_coordinate_system(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        # –û—Å—å X - –∫—Ä–∞—Å–Ω–∞—è
        bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.0, location=(0.5, 0, 0), rotation=(0, 1.5708, 0))
        x_axis = bpy.context.object
        x_axis.name = "X_Axis"
        
        # –û—Å—å Y - –∑–µ–ª–µ–Ω–∞—è  
        bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.0, location=(0, 0.5, 0), rotation=(1.5708, 0, 0))
        y_axis = bpy.context.object
        y_axis.name = "Y_Axis"
        
        # –û—Å—å Z - —Å–∏–Ω—è—è
        bpy.ops.mesh.primitive_cylinder_add(radius=0.02, depth=1.0, location=(0, 0, 0.5))
        z_axis = bpy.context.object
        z_axis.name = "Z_Axis"
        
        print("‚úì –°–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ ArUco-–º–∞—Ä–∫–µ—Ä–æ–≤")
    
    # –ù–ê–°–¢–†–û–ô–ö–ò - –ò–ó–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–ò –î–ê–ù–ù–´–ï
    DATA_DIRECTORY = r"C:\Users\admin\PyCharmProjects\autocalibration\data"  # –í–∞—à –ø—É—Ç—å
    IMAGE_WIDTH = 2592   # –í–∞—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    IMAGE_HEIGHT = 1944  # –í–∞—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    
    print(f"üìÅ –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {DATA_DIRECTORY}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É
    if not os.path.exists(DATA_DIRECTORY):
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DATA_DIRECTORY}")
        print("üí° –ò–∑–º–µ–Ω–∏—Ç–µ DATA_DIRECTORY –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏")
        return
    
    # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–º–µ—Ä—ã
    print("\nüé• –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä")
    parser = SimpleXMPParser()
    cameras_data = parser.load_all_cameras(DATA_DIRECTORY)
    
    if not cameras_data:
        print("‚ùå –ö–∞–º–µ—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return
    
    # –®–∞–≥ 2: –î–µ—Ç–µ–∫—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
    print("\nüîç –®–∞–≥ 2: –ü–æ–∏—Å–∫ ArUco-–º–∞—Ä–∫–µ—Ä–æ–≤")
    detector = SimpleArUcoDetector()
    all_detections = {}
    
    for camera_id in cameras_data.keys():
        jpg_path = os.path.join(DATA_DIRECTORY, f"{camera_id}.jpg")
        
        if os.path.exists(jpg_path):
            markers = detector.detect_markers(jpg_path)
            
            for marker_id, marker_data in markers.items():
                if marker_id not in all_detections:
                    all_detections[marker_id] = []
                
                all_detections[marker_id].append({
                    'camera_id': camera_id,
                    'center': marker_data['center']
                })
    
    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: {len(all_detections)}")
    
    # –®–∞–≥ 3: –¢—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è
    print("\nüìê –®–∞–≥ 3: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ 3D-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
    triangulator = SimpleTriangulator(cameras_data)
    marker_positions = {}
    
    for marker_id, observations in all_detections.items():
        if len(observations) >= 2:
            position = triangulator.triangulate_marker(observations, IMAGE_WIDTH, IMAGE_HEIGHT)
            if position is not None:
                marker_positions[marker_id] = position
                print(f"‚úì –ú–∞—Ä–∫–µ—Ä {marker_id}: ({position[0]:.3f}, {position[1]:.3f}, {position[2]:.3f})")
    
    print(f"üìç –£—Å–ø–µ—à–Ω–æ —Ç—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞–Ω–æ: {len(marker_positions)} –º–∞—Ä–∫–µ—Ä–æ–≤")
    
    # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ Blender
    print("\nüé® –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ Blender")
    visualizer = BlenderVisualizer()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    visualizer.create_coordinate_system()
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –∫–∞–∫ Empty –æ–±—ä–µ–∫—Ç—ã
    for marker_id, position in marker_positions.items():
        visualizer.create_marker_empty(marker_id, position)
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—ã
    for camera_id, camera_data in cameras_data.items():
        visualizer.create_camera_object(camera_id, camera_data)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n‚ú® –ì–æ—Ç–æ–≤–æ!")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   üé• –ö–∞–º–µ—Ä: {len(cameras_data)}")
    print(f"   üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {len(all_detections)}")
    print(f"   üìç –¢—Ä–∏–∞–Ω–≥—É–ª–∏—Ä–æ–≤–∞–Ω–æ: {len(marker_positions)}")
    print(f"   üé® –û–±—ä–µ–∫—Ç–æ–≤ –≤ Blender: {len(marker_positions)} –º–∞—Ä–∫–µ—Ä–æ–≤ + {len(cameras_data)} –∫–∞–º–µ—Ä")
    
    if marker_positions:
        print(f"\nüìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤:")
        for marker_id, pos in sorted(marker_positions.items()):
            print(f"   –ú–∞—Ä–∫–µ—Ä {marker_id:2d}: ({pos[0]:7.3f}, {pos[1]:7.3f}, {pos[2]:7.3f})")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    main()