# xmp_to_opencv.py - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ XMP ‚Üí OpenCV –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

"""
–ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï #1: RealityCapture XMP ‚Üí OpenCV
==============================================

–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ RealityCapture XMP
–≤ —Ñ–æ—Ä–º–∞—Ç –º–∞—Ç—Ä–∏—Ü—ã –∫–∞–º–µ—Ä—ã OpenCV —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:
- convert_cameras_to_opencv(xmp_cameras, image_size) ‚Üí opencv_cameras
"""

import numpy as np
from typing import Dict, Tuple

class XMPToOpenCVConverter:
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä—ã: XMP ‚Üí OpenCV"""
    
    def __init__(self, sensor_width_35mm: float = 36.0):
        """
        Parameters:
        -----------
        sensor_width_35mm : float
            –®–∏—Ä–∏–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–∫–∞–¥—Ä–æ–≤–æ–≥–æ —Å–µ–Ω—Å–æ—Ä–∞ –≤ –º–º
        """
        self.sensor_width_35mm = sensor_width_35mm
    
    def convert_single_camera(self, camera_id: str, xmp_data: Dict, 
                            image_size: Tuple[int, int]) -> Dict:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã –∏–∑ XMP –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
        
        Parameters:
        -----------
        camera_id : str
            –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–º–µ—Ä—ã
        xmp_data : dict
            –î–∞–Ω–Ω—ã–µ –∏–∑ XMP —Ñ–∞–π–ª–∞ (–æ—Ç SimpleXMPParser)
        image_size : tuple
            –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (width, height) –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            
        Returns:
        --------
        dict
            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenCV
        """
        image_width, image_height = image_size
        
        # === –ò–ó–í–õ–ï–ß–ï–ù–ò–ï XMP –î–ê–ù–ù–´–• ===
        focal_length_35mm = xmp_data['focal_length']
        principal_point_u = xmp_data['principal_point_u']  # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ [-1,+1]
        principal_point_v = xmp_data['principal_point_v']  # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ [-1,+1]
        aspect_ratio = xmp_data['aspect_ratio']
        distortion_coeffs = xmp_data['distortion']
        
        # === –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –§–û–ö–£–°–ù–û–ì–û –†–ê–°–°–¢–û–Ø–ù–ò–Ø ===
        # –ò–∑ –º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤ (35mm —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç) –≤ –ø–∏–∫—Å–µ–ª–∏
        fx_pixels = (focal_length_35mm / self.sensor_width_35mm) * image_width
        fy_pixels = fx_pixels * aspect_ratio
        
        # === –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –ì–õ–ê–í–ù–û–ô –¢–û–ß–ö–ò ===
        # –ò–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç [-1,+1] –≤ –ø–∏–∫—Å–µ–ª–∏ [0, width/height]
        cx_pixels = image_width / 2 + principal_point_u * (image_width / 2)
        cy_pixels = image_height / 2 + principal_point_v * (image_height / 2)
        
        # === –°–û–ó–î–ê–ù–ò–ï –ú–ê–¢–†–ò–¶–´ –ö–ê–ú–ï–†–´ ===
        camera_matrix = np.array([
            [fx_pixels,      0.0, cx_pixels],
            [     0.0, fy_pixels, cy_pixels],
            [     0.0,      0.0,      1.0]
        ])
        
        # === –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
        validation_warnings = self._validate_opencv_params(
            fx_pixels, fy_pixels, cx_pixels, cy_pixels, 
            image_width, image_height
        )
        
        # === –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===
        return {
            # –û—Å–Ω–æ–≤–Ω—ã–µ OpenCV –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            'camera_matrix': camera_matrix,
            'distortion_coeffs': np.array(distortion_coeffs),
            'fx': fx_pixels,
            'fy': fy_pixels,
            'cx': cx_pixels,
            'cy': cy_pixels,
            'image_size': image_size,
            
            # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ XMP
            'position': np.array(xmp_data['position']),
            'rotation': np.array(xmp_data['rotation']),
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            'original_focal_35mm': focal_length_35mm,
            'original_principal_u': principal_point_u,
            'original_principal_v': principal_point_v,
            'conversion_warnings': validation_warnings
        }
    
    def convert_all_cameras(self, xmp_cameras: Dict, 
                          image_size: Tuple[int, int]) -> Dict:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–º–µ—Ä –∏–∑ XMP –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
        
        Parameters:
        -----------
        xmp_cameras : dict
            –°–ª–æ–≤–∞—Ä—å –∫–∞–º–µ—Ä –æ—Ç SimpleXMPParser
        image_size : tuple
            –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (width, height) –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            
        Returns:
        --------
        dict
            –°–ª–æ–≤–∞—Ä—å {camera_id: opencv_params}
        """
        opencv_cameras = {}
        
        for camera_id, xmp_data in xmp_cameras.items():
            try:
                opencv_params = self.convert_single_camera(camera_id, xmp_data, image_size)
                opencv_cameras[camera_id] = opencv_params
                
                # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
                warnings = opencv_params['conversion_warnings']
                if warnings:
                    print(f"   ‚ö†Ô∏è  {camera_id}: {'; '.join(warnings)}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è {camera_id}: {e}")
                continue
        
        return opencv_cameras
    
    def _validate_opencv_params(self, fx: float, fy: float, cx: float, cy: float,
                              width: int, height: int) -> list:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ OpenCV"""
        
        warnings = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–∫—É—Å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        if not (500 <= fx <= 10000):
            warnings.append(f"–ù–µ–æ–±—ã—á–Ω–æ–µ —Ñ–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ fx={fx:.1f}")
        if not (500 <= fy <= 10000):
            warnings.append(f"–ù–µ–æ–±—ã—á–Ω–æ–µ —Ñ–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ fy={fy:.1f}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Ç–æ—á–∫–∏
        if not (0 <= cx <= width):
            warnings.append(f"–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ cx={cx:.1f} –≤–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        if not (0 <= cy <= height):
            warnings.append(f"–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ cy={cy:.1f} –≤–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è fx/fy
        ratio_diff = abs(fx - fy) / max(fx, fy)
        if ratio_diff > 0.05:  # –±–æ–ª—å—à–µ 5%
            warnings.append(f"–ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ fx/fy: {ratio_diff*100:.1f}%")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π —Ç–æ—á–∫–∏ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
        center_x, center_y = width/2, height/2
        offset_x = abs(cx - center_x) / center_x
        offset_y = abs(cy - center_y) / center_y
        
        if offset_x > 0.1:  # –±–æ–ª—å—à–µ 10%
            warnings.append(f"–ë–æ–ª—å—à–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Ç–æ—á–∫–∏ –ø–æ X: {offset_x*100:.1f}%")
        if offset_y > 0.1:  # –±–æ–ª—å—à–µ 10%
            warnings.append(f"–ë–æ–ª—å—à–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Ç–æ—á–∫–∏ –ø–æ Y: {offset_y*100:.1f}%")
        
        return warnings

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

def convert_cameras_to_opencv(xmp_cameras: Dict, image_size: Tuple[int, int]) -> Dict:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä XMP ‚Üí OpenCV
    
    Parameters:
    -----------
    xmp_cameras : dict
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç SimpleXMPParser.load_all_cameras()
    image_size : tuple
        –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (width, height) –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        
    Returns:
    --------
    dict
        –°–ª–æ–≤–∞—Ä—å –∫–∞–º–µ—Ä —Å OpenCV –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        
    Example:
    --------
    >>> from xmp_parser import SimpleXMPParser
    >>> from xmp_to_opencv import convert_cameras_to_opencv
    >>> 
    >>> parser = SimpleXMPParser()
    >>> xmp_cameras = parser.load_all_cameras("data")
    >>> opencv_cameras = convert_cameras_to_opencv(xmp_cameras, (4032, 3024))
    """
    converter = XMPToOpenCVConverter()
    return converter.convert_all_cameras(xmp_cameras, image_size)

def print_conversion_example(camera_id: str, xmp_data: Dict, opencv_data: Dict):
    """
    –ü–µ—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä—ã
    
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    print(f"\nüì∑ –ü–†–ò–ú–ï–† –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø: {camera_id}")
    print("-" * 40)
    
    # XMP –¥–∞–Ω–Ω—ã–µ
    print("üè≠ RealityCapture XMP:")
    print(f"   –§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {xmp_data['focal_length']:.3f} mm (35mm —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç)")
    print(f"   –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ U: {xmp_data['principal_point_u']:.6f} (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)")
    print(f"   –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ V: {xmp_data['principal_point_v']:.6f} (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)")
    
    # OpenCV –¥–∞–Ω–Ω—ã–µ
    print("\nüîß OpenCV —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {opencv_data['image_size'][0]}x{opencv_data['image_size'][1]} –ø–∏–∫—Å–µ–ª–µ–π")
    print(f"   –§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ fx: {opencv_data['fx']:.2f} –ø–∏–∫—Å–µ–ª–µ–π")
    print(f"   –§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ fy: {opencv_data['fy']:.2f} –ø–∏–∫—Å–µ–ª–µ–π")
    print(f"   –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ cx: {opencv_data['cx']:.2f} –ø–∏–∫—Å–µ–ª–µ–π")
    print(f"   –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ cy: {opencv_data['cy']:.2f} –ø–∏–∫—Å–µ–ª–µ–π")
    
    # –ú–∞—Ç—Ä–∏—Ü–∞ –∫–∞–º–µ—Ä—ã
    matrix = opencv_data['camera_matrix']
    print(f"\n   –ú–∞—Ç—Ä–∏—Ü–∞ –∫–∞–º–µ—Ä—ã:")
    print(f"   [{matrix[0][0]:7.1f},     0.0, {matrix[0][2]:7.1f}]")
    print(f"   [    0.0, {matrix[1][1]:7.1f}, {matrix[1][2]:7.1f}]")
    print(f"   [    0.0,     0.0,     1.0]")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    warnings = opencv_data['conversion_warnings']
    if warnings:
        print(f"\n   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
        for warning in warnings:
            print(f"      ‚Ä¢ {warning}")
    else:
        print(f"\n   ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è
def test_conversion():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–ï–°–¢ –ú–û–î–£–õ–Ø XMP ‚Üí OpenCV")
    print("=" * 35)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ XMP –¥–∞–Ω–Ω—ã–µ
    test_xmp_data = {
        'focal_length': 36.28,
        'principal_point_u': -0.004,
        'principal_point_v': 0.012,
        'aspect_ratio': 1.0,
        'distortion': [-0.35, 0.014, 0.35, 0, 0, 0],
        'position': [1.2, -0.8, 2.1],
        'rotation': [
            [0.971, -0.001, 0.239],
            [0.047, -0.980, -0.193],
            [0.234, 0.199, -0.952]
        ]
    }
    
    test_image_size = (4032, 3024)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    converter = XMPToOpenCVConverter()
    opencv_data = converter.convert_single_camera("test_camera", test_xmp_data, test_image_size)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print_conversion_example("test_camera", test_xmp_data, opencv_data)
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    test_conversion()